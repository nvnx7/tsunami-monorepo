{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IHasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IHasher {\n    function poseidon(bytes32[2] calldata inputs)\n        external\n        pure\n        returns (bytes32);\n}\n"
    },
    "contracts/interfaces/ITsunami.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\ninterface ITsunami {\n    event NewCommitment(bytes32 commitment, uint256 leafIndex, bytes encryptedOutput);\n    event NewNullifier(bytes32 nullifier);\n\n    function create(DataTypes.CreateProofArgs calldata args, bytes calldata encryptedOutput)\n        external;\n\n    function withdraw(DataTypes.WithdrawProofArgs calldata args, DataTypes.ExtData calldata extData)\n        external;\n\n    function revoke(DataTypes.RevokeProofArgs calldata args, DataTypes.ExtData calldata extData)\n        external;\n}\n"
    },
    "contracts/interfaces/IVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IVerifier {\n    // Proposal\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory inputs\n    ) external view returns (bool r);\n\n    // Withdraw\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[6] memory inputs\n    ) external view returns (bool r);\n}\n"
    },
    "contracts/interfaces/IWToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWToken is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/MerkleTree.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./interfaces/IHasher.sol\";\n\ncontract MerkleTree {\n    uint256 public constant FIELD_SIZE =\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    // keccak256(\"tornado\") % FIELD_SIZE\n    uint256 public constant ZERO_VALUE =\n        21663839004416932945382355908790599225266501822907911457504978515578255421292;\n\n    uint32 public constant ROOT_HISTORY_SIZE = 100;\n\n    IHasher public immutable hasher;\n    uint256 public immutable numLevels;\n\n    // the following variables are made public for easier testing and debugging and\n    // are not supposed to be accessed in regular code\n    // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\n    // it removes index range check on every interaction\n    mapping(uint256 => bytes32) public filledSubtrees;\n    mapping(uint256 => bytes32) public roots;\n\n    uint32 public currentRootIndex;\n    uint32 public nextIndex;\n\n    constructor(uint256 numLevels_, address hasher_) {\n        require(numLevels_ > 0, \"Levels should be greater than zero\");\n        require(numLevels_ < 32, \"Levels should be less than 32\");\n        numLevels = numLevels_;\n        hasher = IHasher(hasher_);\n        for (uint256 i = 0; i < numLevels; i++) {\n            filledSubtrees[i] = zeros(i);\n        }\n        roots[0] = zeros(numLevels);\n    }\n\n    function hashLeftRight(bytes32 left, bytes32 right)\n        public\n        view\n        returns (bytes32)\n    {\n        require(uint256(left) < FIELD_SIZE, \"Left should be inside the field\");\n        require(\n            uint256(right) < FIELD_SIZE,\n            \"Right should be inside the field\"\n        );\n\n        bytes32[2] memory input;\n        input[0] = left;\n        input[1] = right;\n\n        return hasher.poseidon(input);\n    }\n\n    function _insert(bytes32 leaf) internal returns (uint32 index) {\n        uint32 _nextIndex = nextIndex;\n        require(_nextIndex != 2**numLevels, \"Merkle tree is full\");\n\n        uint32 currentIndex = _nextIndex;\n        bytes32 currentLevelHash = leaf;\n        bytes32 left;\n        bytes32 right;\n\n        for (uint32 i = 0; i < numLevels; i++) {\n            if (currentIndex % 2 == 0) {\n                left = currentLevelHash;\n                right = zeros(i);\n                filledSubtrees[i] = currentLevelHash;\n            } else {\n                left = filledSubtrees[i];\n                right = currentLevelHash;\n            }\n\n            // Current level hash accumulates hashes from bottom to top.\n            // At top it becomes the root of merkle tree.\n            currentLevelHash = hashLeftRight(left, right);\n\n            // This alternates the nodes (left and right) at each level.\n            currentIndex /= 2;\n        }\n\n        // Older roots are overwritten by newer ones when size limit hits ROOT_HISTORY_SIZE.\n        uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\n        currentRootIndex = newRootIndex;\n        roots[newRootIndex] = currentLevelHash;\n        nextIndex = _nextIndex + 1;\n        return _nextIndex;\n    }\n\n    /**\n     * @dev Whether the root is present in the root history\n     */\n    function isKnownRoot(bytes32 root) public view returns (bool) {\n        if (root == 0) {\n            return false;\n        }\n        uint32 _currentRootIndex = currentRootIndex;\n        uint256 i = _currentRootIndex;\n        do {\n            if (root == roots[i]) {\n                return true;\n            }\n            if (i == 0) {\n                i = ROOT_HISTORY_SIZE;\n            }\n            i--;\n        } while (i != _currentRootIndex);\n        return false;\n    }\n\n    function getLastRoot() public view returns (bytes32) {\n        return roots[currentRootIndex];\n    }\n\n    /**\n     * @dev Zero elements for poseidon hash based merkle tree\n     */\n    function zeros(uint256 i) public pure returns (bytes32) {\n        if (i == 0)\n            return\n                0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c;\n        else if (i == 1)\n            return\n                0x13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8;\n        else if (i == 2)\n            return\n                0x217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765;\n        else if (i == 3)\n            return\n                0x0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee;\n        else if (i == 4)\n            return\n                0x27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587;\n        else if (i == 5)\n            return\n                0x194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc;\n        else if (i == 6)\n            return\n                0x1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f;\n        else if (i == 7)\n            return\n                0x267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219;\n        else if (i == 8)\n            return\n                0x1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d;\n        else if (i == 9)\n            return\n                0x0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce;\n        else if (i == 10)\n            return\n                0x2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7;\n        else if (i == 11)\n            return\n                0x280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47;\n        else if (i == 12)\n            return\n                0x045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b;\n        else if (i == 13)\n            return\n                0x27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366;\n        else if (i == 14)\n            return\n                0x1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef;\n        else if (i == 15)\n            return\n                0x20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca;\n        else if (i == 16)\n            return\n                0x09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec;\n        else if (i == 17)\n            return\n                0x0064b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b;\n        else if (i == 18)\n            return\n                0x095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f;\n        else if (i == 19)\n            return\n                0x11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63;\n        else if (i == 20)\n            return\n                0x2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb;\n        else if (i == 21)\n            return\n                0x16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279;\n        else if (i == 22)\n            return\n                0x21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff;\n        else if (i == 23)\n            return\n                0x2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962;\n        else if (i == 24)\n            return\n                0x16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10;\n        else if (i == 25)\n            return\n                0x2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013;\n        else if (i == 26)\n            return\n                0x2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14;\n        else if (i == 27)\n            return\n                0x0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0;\n        else if (i == 28)\n            return\n                0x202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50;\n        else if (i == 29)\n            return\n                0x23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187;\n        else if (i == 30)\n            return\n                0x1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0;\n        else if (i == 31)\n            return\n                0x1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06;\n        else if (i == 32)\n            return\n                0x25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6;\n        else revert(\"Index out of bounds\");\n    }\n}\n"
    },
    "contracts/Tsunami.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IVerifier.sol\";\nimport \"./interfaces/ITsunami.sol\";\nimport \"./MerkleTree.sol\";\nimport {DataTypes} from \"./types/DataTypes.sol\";\n\ncontract Tsunami is ITsunami, MerkleTree, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant MAX_EXT_AMOUNT = 2**248;\n    uint256 public constant MAX_FEE = 2**248;\n    uint256 public constant MIN_EXT_AMOUNT_LIMIT = 0.5 ether;\n\n    IVerifier public immutable createVerifier;\n    IVerifier public immutable withdrawVerifier;\n    IVerifier public immutable revokeVerifier;\n    IERC20 public immutable token;\n\n    uint256 public maxDepositAmount;\n    mapping(bytes32 => bool) public nullifierHashes;\n\n    constructor(\n        uint32 numLevels_,\n        uint256 maxDepositAmount_,\n        IERC20 token_,\n        address hasher_,\n        IVerifier createVerifier_,\n        IVerifier withdrawVerifier_,\n        IVerifier revokeVerifier_\n    ) MerkleTree(numLevels_, hasher_) {\n        createVerifier = createVerifier_;\n        withdrawVerifier = withdrawVerifier_;\n        revokeVerifier = revokeVerifier_;\n        token = token_;\n        maxDepositAmount = maxDepositAmount_;\n    }\n\n    function create(DataTypes.CreateProofArgs calldata args, bytes calldata encryptedOutput)\n        external\n    {\n        require(verifyCreateProof(args), \"Invalid create proof\");\n        token.safeTransferFrom(msg.sender, address(this), args.publicAmount);\n        uint32 index = _insert(args.commitment);\n        emit NewCommitment(args.commitment, index, encryptedOutput);\n    }\n\n    function withdraw(DataTypes.WithdrawProofArgs calldata args, DataTypes.ExtData calldata extData)\n        external\n    {\n        _transactWithdraw(args, extData);\n    }\n\n    function revoke(DataTypes.RevokeProofArgs calldata args, DataTypes.ExtData calldata extData)\n        external\n    {\n        _transactRevoke(args, extData);\n    }\n\n    function isSpent(bytes32 nullifierHash) public view returns (bool) {\n        return nullifierHashes[nullifierHash];\n    }\n\n    function calculatePublicAmount(uint256 withdrawAmount, uint256 fee)\n        public\n        pure\n        returns (uint256)\n    {\n        require(fee < MAX_FEE, \"Invalid fee\");\n        require(withdrawAmount < MAX_EXT_AMOUNT, \"Invalid ext amount\");\n        return withdrawAmount + fee;\n    }\n\n    function verifyCreateProof(DataTypes.CreateProofArgs calldata args) public view returns (bool) {\n        return\n            createVerifier.verifyProof(\n                args.proof.a,\n                args.proof.b,\n                args.proof.c,\n                [args.publicAmount, uint256(args.commitment)]\n            );\n    }\n\n    function verifyWithdrawProof(DataTypes.WithdrawProofArgs calldata args)\n        public\n        view\n        returns (bool)\n    {\n        return\n            withdrawVerifier.verifyProof(\n                args.proof.a,\n                args.proof.b,\n                args.proof.c,\n                [\n                    uint256(args.root),\n                    args.publicAmount,\n                    uint256(args.extDataHash),\n                    uint256(args.inputNullifier),\n                    args.checkpointTime,\n                    uint256(args.outputCommitment)\n                ]\n            );\n    }\n\n    function verifyRevokeProof(DataTypes.RevokeProofArgs calldata args) public view returns (bool) {\n        return\n            revokeVerifier.verifyProof(\n                args.proof.a,\n                args.proof.b,\n                args.proof.c,\n                [\n                    uint256(args.root),\n                    args.publicAmount,\n                    uint256(args.extDataHash),\n                    uint256(args.inputNullifier),\n                    args.stopTime,\n                    uint256(args.outputCommitment)\n                ]\n            );\n    }\n\n    function _transactWithdraw(\n        DataTypes.WithdrawProofArgs calldata args,\n        DataTypes.ExtData calldata extData\n    ) internal nonReentrant {\n        require(isKnownRoot(args.root), \"Invalid merkle root\");\n        require(!isSpent(args.inputNullifier), \"Input is already spent\");\n        require(args.checkpointTime <= block.timestamp, \"Early withdraw\");\n        require(\n            uint256(args.extDataHash) == uint256(keccak256(abi.encode(extData))) % FIELD_SIZE,\n            \"Incorrect external data hash\"\n        );\n        require(\n            args.publicAmount == calculatePublicAmount(extData.withdrawAmount, extData.fee),\n            \"Invalid public amount\"\n        );\n        require(extData.recipient != address(0), \"Cannot withdraw to zero address\");\n        require(verifyWithdrawProof(args), \"Invalid transaction proof\");\n\n        nullifierHashes[args.inputNullifier] = true;\n\n        token.safeTransfer(extData.recipient, uint256(extData.withdrawAmount));\n\n        if (extData.fee > 0) {\n            token.safeTransfer(extData.relayer, extData.fee);\n        }\n\n        uint32 index = _insert(args.outputCommitment);\n\n        emit NewCommitment(args.outputCommitment, index, extData.encryptedOutput);\n        emit NewNullifier(args.inputNullifier);\n    }\n\n    function _transactRevoke(\n        DataTypes.RevokeProofArgs calldata args,\n        DataTypes.ExtData calldata extData\n    ) internal nonReentrant {\n        require(isKnownRoot(args.root), \"Invalid merkle root\");\n        require(!isSpent(args.inputNullifier), \"Input is already spent\");\n        require(args.stopTime >= block.timestamp, \"Early revoke\");\n        require(\n            uint256(args.extDataHash) == uint256(keccak256(abi.encode(extData))) % FIELD_SIZE,\n            \"Incorrect external data hash\"\n        );\n        require(\n            args.publicAmount == calculatePublicAmount(extData.withdrawAmount, extData.fee),\n            \"Invalid public amount\"\n        );\n        require(extData.recipient != address(0), \"Cannot withdraw to zero address\");\n        require(verifyRevokeProof(args), \"Invalid transaction proof\");\n\n        nullifierHashes[args.inputNullifier] = true;\n\n        token.safeTransfer(extData.recipient, uint256(extData.withdrawAmount));\n\n        if (extData.fee > 0) {\n            token.safeTransfer(extData.relayer, extData.fee);\n        }\n\n        uint32 index = _insert(args.outputCommitment);\n\n        emit NewCommitment(args.outputCommitment, index, extData.encryptedOutput);\n        emit NewNullifier(args.inputNullifier);\n    }\n}\n"
    },
    "contracts/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nlibrary DataTypes {\n    struct ExtData {\n        address recipient;\n        uint256 withdrawAmount;\n        address relayer;\n        uint256 fee;\n        bytes encryptedOutput;\n    }\n\n    struct Proof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n    }\n\n    struct WithdrawProofArgs {\n        Proof proof;\n        bytes32 root;\n        bytes32 inputNullifier;\n        bytes32 outputCommitment;\n        bytes32 extDataHash;\n        uint256 publicAmount;\n        uint256 checkpointTime;\n    }\n\n    struct RevokeProofArgs {\n        Proof proof;\n        bytes32 root;\n        bytes32 inputNullifier;\n        bytes32 outputCommitment;\n        bytes32 extDataHash;\n        uint256 publicAmount;\n        uint256 stopTime;\n    }\n\n    struct CreateProofArgs {\n        Proof proof;\n        bytes32 commitment;\n        uint256 publicAmount;\n    }\n}\n"
    },
    "contracts/WTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IWToken.sol\";\nimport \"./interfaces/ITsunami.sol\";\n\ncontract WTokenGateway {\n    IWToken public immutable wToken;\n\n    constructor(address wToken_) {\n        wToken = IWToken(wToken_);\n    }\n\n    function create(\n        address tsunami,\n        DataTypes.CreateProofArgs calldata args,\n        bytes calldata encryptedOutput\n    ) external payable {\n        wToken.deposit{value: msg.value}();\n        ITsunami(tsunami).create(args, encryptedOutput);\n    }\n\n    function withdraw(\n        address tsunami,\n        address unwrappedTokenReceiver,\n        DataTypes.WithdrawProofArgs calldata args,\n        DataTypes.ExtData calldata extData\n    ) external {\n        require(extData.recipient == address(this), \"Require recipient to be gateway\");\n        ITsunami(tsunami).withdraw(args, extData);\n        uint256 withdrawAmount = uint256(extData.withdrawAmount);\n        wToken.withdraw(withdrawAmount);\n        _safeTransferETH(unwrappedTokenReceiver, withdrawAmount);\n    }\n\n    function revoke(\n        address tsunami,\n        address unwrappedTokenReceiver,\n        DataTypes.RevokeProofArgs calldata args,\n        DataTypes.ExtData calldata extData\n    ) external {\n        require(extData.recipient == address(this), \"Require recipient to be gateway\");\n        ITsunami(tsunami).revoke(args, extData);\n        uint256 withdrawAmount = uint256(extData.withdrawAmount);\n        wToken.withdraw(withdrawAmount);\n        _safeTransferETH(unwrappedTokenReceiver, withdrawAmount);\n    }\n\n    function _safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}