{
  "address": "0x91FDa51817e26f174cf9F41B26ceaFdeA95F0e42",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tsunami",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct DataTypes.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "commitment",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.CreateProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "encryptedOutput",
          "type": "bytes"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tsunami",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "unwrappedTokenReceiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct DataTypes.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "inputNullifier",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "outputCommitment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.RevokeProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "withdrawAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wToken",
      "outputs": [
        {
          "internalType": "contract IWToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tsunami",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "unwrappedTokenReceiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct DataTypes.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "inputNullifier",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "outputCommitment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "checkpointTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.WithdrawProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "withdrawAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfaf5c78d145d2a41eace3fc911e85018c390f99ef59ab54d48b9b49ba7dc96ea",
  "receipt": {
    "to": null,
    "from": "0x80630fBf405eD070F10c8fFE8E9A83C60736a770",
    "contractAddress": "0x91FDa51817e26f174cf9F41B26ceaFdeA95F0e42",
    "transactionIndex": 0,
    "gasUsed": "1237113",
    "logsBloom": "0x
    "blockHash": "0xa5a79b6964b2c8f8c092ad014d7ce917db3b83b43a609654b469de01d17fd846",
    "transactionHash": "0xfaf5c78d145d2a41eace3fc911e85018c390f99ef59ab54d48b9b49ba7dc96ea",
    "logs": [],
    "blockNumber": 1627633,
    "cumulativeGasUsed": "1237113",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfbe7a8FFD4EcB1678152bafb4915F1e5869178b0"
  ],
  "numDeployments": 1,
  "solcInputHash": "d72fc06c07d5e910b2f48478cc660b1b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tsunami\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct DataTypes.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CreateProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tsunami\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unwrappedTokenReceiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct DataTypes.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RevokeProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wToken\",\"outputs\":[{\"internalType\":\"contract IWToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tsunami\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unwrappedTokenReceiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct DataTypes.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpointTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.WithdrawProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WTokenGateway.sol\":\"WTokenGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/WTokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IWToken.sol\\\";\\nimport \\\"./interfaces/ITsunami.sol\\\";\\n\\ncontract WTokenGateway {\\n    IWToken public immutable wToken;\\n\\n    constructor(address wToken_) {\\n        wToken = IWToken(wToken_);\\n    }\\n\\n    function create(\\n        address tsunami,\\n        DataTypes.CreateProofArgs calldata args,\\n        bytes calldata encryptedOutput\\n    ) external payable {\\n        require(msg.value == args.publicAmount, \\\"Wrong amount sent\\\");\\n        wToken.deposit{value: msg.value}();\\n        wToken.approve(tsunami, msg.value);\\n        ITsunami(tsunami).create(args, encryptedOutput);\\n    }\\n\\n    function withdraw(\\n        address tsunami,\\n        address unwrappedTokenReceiver,\\n        DataTypes.WithdrawProofArgs calldata args,\\n        DataTypes.ExtData calldata extData\\n    ) external {\\n        require(extData.recipient == address(this), \\\"Require recipient to be gateway\\\");\\n        ITsunami(tsunami).withdraw(args, extData);\\n        uint256 withdrawAmount = uint256(extData.withdrawAmount);\\n        wToken.approve(address(wToken), withdrawAmount);\\n        wToken.withdraw(withdrawAmount);\\n        _safeTransferETH(unwrappedTokenReceiver, withdrawAmount);\\n    }\\n\\n    function revoke(\\n        address tsunami,\\n        address unwrappedTokenReceiver,\\n        DataTypes.RevokeProofArgs calldata args,\\n        DataTypes.ExtData calldata extData\\n    ) external {\\n        require(extData.recipient == address(this), \\\"Require recipient to be gateway\\\");\\n        ITsunami(tsunami).revoke(args, extData);\\n        uint256 withdrawAmount = uint256(extData.withdrawAmount);\\n        wToken.approve(address(wToken), withdrawAmount);\\n        wToken.withdraw(withdrawAmount);\\n        _safeTransferETH(unwrappedTokenReceiver, withdrawAmount);\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x69056d12b94715173c3124c0bdba59f00ef53dc05806f5ede63ae74c37649c91\",\"license\":\"MIT\"},\"contracts/interfaces/ITsunami.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\ninterface ITsunami {\\n    event NewCommitment(bytes32 commitment, uint256 leafIndex, bytes encryptedOutput);\\n    event NewNullifier(bytes32 nullifier);\\n\\n    function create(DataTypes.CreateProofArgs calldata args, bytes calldata encryptedOutput)\\n        external;\\n\\n    function withdraw(DataTypes.WithdrawProofArgs calldata args, DataTypes.ExtData calldata extData)\\n        external;\\n\\n    function revoke(DataTypes.RevokeProofArgs calldata args, DataTypes.ExtData calldata extData)\\n        external;\\n}\\n\",\"keccak256\":\"0x662613a285272dff271892b7a9511dfcaea901b958541b8ea3e65bc500f59dd5\",\"license\":\"MIT\"},\"contracts/interfaces/IWToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWToken is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x696235f2024f94ca8afa8510724d7db52205ed4edd67a9d907e96803d89cba08\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary DataTypes {\\n    struct ExtData {\\n        address recipient;\\n        uint256 withdrawAmount;\\n        address relayer;\\n        uint256 fee;\\n        bytes encryptedOutput;\\n    }\\n\\n    struct Proof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n    }\\n\\n    struct WithdrawProofArgs {\\n        Proof proof;\\n        bytes32 root;\\n        bytes32 inputNullifier;\\n        bytes32 outputCommitment;\\n        bytes32 extDataHash;\\n        uint256 publicAmount;\\n        uint256 checkpointTime;\\n    }\\n\\n    struct RevokeProofArgs {\\n        Proof proof;\\n        bytes32 root;\\n        bytes32 inputNullifier;\\n        bytes32 outputCommitment;\\n        bytes32 extDataHash;\\n        uint256 publicAmount;\\n        uint256 stopTime;\\n    }\\n\\n    struct CreateProofArgs {\\n        Proof proof;\\n        bytes32 commitment;\\n        uint256 publicAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xfbc127c4256ceebb96f3c6b4acd44bc8a1a4b4c0b5f85875b9352086c5eb1886\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620016ce380380620016ce8339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b60805161156d620001616000396000818160ea01528181610155015281816101d6015281816103e00152818161041c0152818161049f015281816106310152818161066d01526106f0015261156d6000f3fe6080604052600436106100435760003560e01c80630babd8641461004f578063521850cd1461007a578063844b031a14610096578063c92274e1146100bf5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100e8565b6040516100719190610909565b60405180910390f35b610094600480360381019061008f91906109f6565b61010c565b005b3480156100a257600080fd5b506100bd60048036038101906100b89190610aab565b6102e8565b005b3480156100cb57600080fd5b506100e660048036038101906100e19190610b50565b610539565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b8261012001353414610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610c32565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156101bb57600080fd5b505af11580156101cf573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b385346040518363ffffffff1660e01b815260040161022f929190610c7a565b6020604051808303816000875af115801561024e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102729190610cdb565b508373ffffffffffffffffffffffffffffffffffffffff1663386dc0838484846040518463ffffffff1660e01b81526004016102b093929190610fac565b600060405180830381600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b5050505050505050565b3073ffffffffffffffffffffffffffffffffffffffff168160000160208101906103129190610fe0565b73ffffffffffffffffffffffffffffffffffffffff1614610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035f90611059565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a452eac383836040518363ffffffff1660e01b81526004016103a39291906112c2565b600060405180830381600087803b1580156103bd57600080fd5b505af11580156103d1573d6000803e3d6000fd5b505050506000816020013590507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610459929190610c7a565b6020604051808303816000875af1158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c9190610cdb565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016104f691906112f4565b600060405180830381600087803b15801561051057600080fd5b505af1158015610524573d6000803e3d6000fd5b50505050610532848261078a565b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff168160000160208101906105639190610fe0565b73ffffffffffffffffffffffffffffffffffffffff16146105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090611059565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663e1faa14683836040518363ffffffff1660e01b81526004016105f49291906113e2565b600060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b505050506000816020013590507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016106aa929190610c7a565b6020604051808303816000875af11580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190610cdb565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161074791906112f4565b600060405180830381600087803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b50505050610783848261078a565b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156107bf576107be611414565b5b6040519080825280601f01601f1916602001820160405280156107f15781602001600182028036833780820191505090505b506040516107ff91906114b4565b60006040518083038185875af1925050503d806000811461083c576040519150601f19603f3d011682016040523d82523d6000602084013e610841565b606091505b5050905080610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90611517565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108cf6108ca6108c58461088a565b6108aa565b61088a565b9050919050565b60006108e1826108b4565b9050919050565b60006108f3826108d6565b9050919050565b610903816108e8565b82525050565b600060208201905061091e60008301846108fa565b92915050565b600080fd5b600080fd5b60006109398261088a565b9050919050565b6109498161092e565b811461095457600080fd5b50565b60008135905061096681610940565b92915050565b600080fd5b600061014082840312156109885761098761096c565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126109b6576109b5610991565b5b8235905067ffffffffffffffff8111156109d3576109d2610996565b5b6020830191508360018202830111156109ef576109ee61099b565b5b9250929050565b6000806000806101808587031215610a1157610a10610924565b5b6000610a1f87828801610957565b9450506020610a3087828801610971565b93505061016085013567ffffffffffffffff811115610a5257610a51610929565b5b610a5e878288016109a0565b925092505092959194509250565b60006101c08284031215610a8357610a8261096c565b5b81905092915050565b600060a08284031215610aa257610aa161096c565b5b81905092915050565b6000806000806102208587031215610ac657610ac5610924565b5b6000610ad487828801610957565b9450506020610ae587828801610957565b9350506040610af687828801610a6c565b92505061020085013567ffffffffffffffff811115610b1857610b17610929565b5b610b2487828801610a8c565b91505092959194509250565b60006101c08284031215610b4757610b4661096c565b5b81905092915050565b6000806000806102208587031215610b6b57610b6a610924565b5b6000610b7987828801610957565b9450506020610b8a87828801610957565b9350506040610b9b87828801610b30565b92505061020085013567ffffffffffffffff811115610bbd57610bbc610929565b5b610bc987828801610a8c565b91505092959194509250565b600082825260208201905092915050565b7f57726f6e6720616d6f756e742073656e74000000000000000000000000000000600082015250565b6000610c1c601183610bd5565b9150610c2782610be6565b602082019050919050565b60006020820190508181036000830152610c4b81610c0f565b9050919050565b610c5b8161092e565b82525050565b6000819050919050565b610c7481610c61565b82525050565b6000604082019050610c8f6000830185610c52565b610c9c6020830184610c6b565b9392505050565b60008115159050919050565b610cb881610ca3565b8114610cc357600080fd5b50565b600081519050610cd581610caf565b92915050565b600060208284031215610cf157610cf0610924565b5b6000610cff84828501610cc6565b91505092915050565b600082905092915050565b600082905092915050565b82818337505050565b610d3360408383610d1e565b5050565b600082905092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000610d6e8383610d27565b60408301905092915050565b6000604082019050919050565b610d9081610d42565b610d9a8184610d4d565b9250610da582610d58565b8060005b83811015610dde57610dbb8284610d13565b610dc58782610d62565b9650610dd083610d7a565b925050600181019050610da9565b505050505050565b6101008201610df86000830183610d13565b610e056000850182610d27565b50610e136040830183610d37565b610e206040850182610d87565b50610e2e60c0830183610d13565b610e3b60c0850182610d27565b50505050565b6000819050919050565b610e5481610e41565b8114610e5f57600080fd5b50565b600081359050610e7181610e4b565b92915050565b6000610e866020840184610e62565b905092915050565b610e9781610e41565b82525050565b610ea681610c61565b8114610eb157600080fd5b50565b600081359050610ec381610e9d565b92915050565b6000610ed86020840184610eb4565b905092915050565b610ee981610c61565b82525050565b6101408201610f016000830183610d08565b610f0e6000850182610de6565b50610f1d610100830183610e77565b610f2b610100850182610e8e565b50610f3a610120830183610ec9565b610f48610120850182610ee0565b50505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610f8b8385610f4e565b9350610f98838584610f5f565b610fa183610f6e565b840190509392505050565b600061016082019050610fc26000830186610eef565b818103610140830152610fd6818486610f7f565b9050949350505050565b600060208284031215610ff657610ff5610924565b5b600061100484828501610957565b91505092915050565b7f5265717569726520726563697069656e7420746f206265206761746577617900600082015250565b6000611043601f83610bd5565b915061104e8261100d565b602082019050919050565b6000602082019050818103600083015261107281611036565b9050919050565b6101c0820161108b6000830183610d08565b6110986000850182610de6565b506110a7610100830183610e77565b6110b5610100850182610e8e565b506110c4610120830183610e77565b6110d2610120850182610e8e565b506110e1610140830183610e77565b6110ef610140850182610e8e565b506110fe610160830183610e77565b61110c610160850182610e8e565b5061111b610180830183610ec9565b611129610180850182610ee0565b506111386101a0830183610ec9565b6111466101a0850182610ee0565b50505050565b600061115b6020840184610957565b905092915050565b61116c8161092e565b82525050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261119e5761119d61117c565b5b83810192508235915060208301925067ffffffffffffffff8211156111c6576111c5611172565b5b6001820236038313156111dc576111db611177565b5b509250929050565b600082825260208201905092915050565b600061120183856111e4565b935061120e838584610f5f565b61121783610f6e565b840190509392505050565b600060a08301611235600084018461114c565b6112426000860182611163565b506112506020840184610ec9565b61125d6020860182610ee0565b5061126b604084018461114c565b6112786040860182611163565b506112866060840184610ec9565b6112936060860182610ee0565b506112a16080840184611181565b85830360808701526112b48382846111f5565b925050508091505092915050565b60006101e0820190506112d86000830185611079565b8181036101c08301526112eb8184611222565b90509392505050565b60006020820190506113096000830184610c6b565b92915050565b6101c082016113216000830183610d08565b61132e6000850182610de6565b5061133d610100830183610e77565b61134b610100850182610e8e565b5061135a610120830183610e77565b611368610120850182610e8e565b50611377610140830183610e77565b611385610140850182610e8e565b50611394610160830183610e77565b6113a2610160850182610e8e565b506113b1610180830183610ec9565b6113bf610180850182610ee0565b506113ce6101a0830183610ec9565b6113dc6101a0850182610ee0565b50505050565b60006101e0820190506113f8600083018561130f565b8181036101c083015261140b8184611222565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b8381101561147757808201518184015260208101905061145c565b60008484015250505050565b600061148e82611443565b611498818561144e565b93506114a8818560208601611459565b80840191505092915050565b60006114c08284611483565b915081905092915050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b6000611501601383610bd5565b915061150c826114cb565b602082019050919050565b60006020820190508181036000830152611530816114f4565b905091905056fea2646970667358221220e6150706cefab59a8d960aa2fe9b384720cedf8a7b7e6b0a6bd8090f09100e2864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c80630babd8641461004f578063521850cd1461007a578063844b031a14610096578063c92274e1146100bf5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100e8565b6040516100719190610909565b60405180910390f35b610094600480360381019061008f91906109f6565b61010c565b005b3480156100a257600080fd5b506100bd60048036038101906100b89190610aab565b6102e8565b005b3480156100cb57600080fd5b506100e660048036038101906100e19190610b50565b610539565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b8261012001353414610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610c32565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156101bb57600080fd5b505af11580156101cf573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b385346040518363ffffffff1660e01b815260040161022f929190610c7a565b6020604051808303816000875af115801561024e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102729190610cdb565b508373ffffffffffffffffffffffffffffffffffffffff1663386dc0838484846040518463ffffffff1660e01b81526004016102b093929190610fac565b600060405180830381600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b5050505050505050565b3073ffffffffffffffffffffffffffffffffffffffff168160000160208101906103129190610fe0565b73ffffffffffffffffffffffffffffffffffffffff1614610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035f90611059565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a452eac383836040518363ffffffff1660e01b81526004016103a39291906112c2565b600060405180830381600087803b1580156103bd57600080fd5b505af11580156103d1573d6000803e3d6000fd5b505050506000816020013590507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610459929190610c7a565b6020604051808303816000875af1158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c9190610cdb565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016104f691906112f4565b600060405180830381600087803b15801561051057600080fd5b505af1158015610524573d6000803e3d6000fd5b50505050610532848261078a565b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff168160000160208101906105639190610fe0565b73ffffffffffffffffffffffffffffffffffffffff16146105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090611059565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663e1faa14683836040518363ffffffff1660e01b81526004016105f49291906113e2565b600060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b505050506000816020013590507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016106aa929190610c7a565b6020604051808303816000875af11580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190610cdb565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161074791906112f4565b600060405180830381600087803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b50505050610783848261078a565b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156107bf576107be611414565b5b6040519080825280601f01601f1916602001820160405280156107f15781602001600182028036833780820191505090505b506040516107ff91906114b4565b60006040518083038185875af1925050503d806000811461083c576040519150601f19603f3d011682016040523d82523d6000602084013e610841565b606091505b5050905080610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90611517565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108cf6108ca6108c58461088a565b6108aa565b61088a565b9050919050565b60006108e1826108b4565b9050919050565b60006108f3826108d6565b9050919050565b610903816108e8565b82525050565b600060208201905061091e60008301846108fa565b92915050565b600080fd5b600080fd5b60006109398261088a565b9050919050565b6109498161092e565b811461095457600080fd5b50565b60008135905061096681610940565b92915050565b600080fd5b600061014082840312156109885761098761096c565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126109b6576109b5610991565b5b8235905067ffffffffffffffff8111156109d3576109d2610996565b5b6020830191508360018202830111156109ef576109ee61099b565b5b9250929050565b6000806000806101808587031215610a1157610a10610924565b5b6000610a1f87828801610957565b9450506020610a3087828801610971565b93505061016085013567ffffffffffffffff811115610a5257610a51610929565b5b610a5e878288016109a0565b925092505092959194509250565b60006101c08284031215610a8357610a8261096c565b5b81905092915050565b600060a08284031215610aa257610aa161096c565b5b81905092915050565b6000806000806102208587031215610ac657610ac5610924565b5b6000610ad487828801610957565b9450506020610ae587828801610957565b9350506040610af687828801610a6c565b92505061020085013567ffffffffffffffff811115610b1857610b17610929565b5b610b2487828801610a8c565b91505092959194509250565b60006101c08284031215610b4757610b4661096c565b5b81905092915050565b6000806000806102208587031215610b6b57610b6a610924565b5b6000610b7987828801610957565b9450506020610b8a87828801610957565b9350506040610b9b87828801610b30565b92505061020085013567ffffffffffffffff811115610bbd57610bbc610929565b5b610bc987828801610a8c565b91505092959194509250565b600082825260208201905092915050565b7f57726f6e6720616d6f756e742073656e74000000000000000000000000000000600082015250565b6000610c1c601183610bd5565b9150610c2782610be6565b602082019050919050565b60006020820190508181036000830152610c4b81610c0f565b9050919050565b610c5b8161092e565b82525050565b6000819050919050565b610c7481610c61565b82525050565b6000604082019050610c8f6000830185610c52565b610c9c6020830184610c6b565b9392505050565b60008115159050919050565b610cb881610ca3565b8114610cc357600080fd5b50565b600081519050610cd581610caf565b92915050565b600060208284031215610cf157610cf0610924565b5b6000610cff84828501610cc6565b91505092915050565b600082905092915050565b600082905092915050565b82818337505050565b610d3360408383610d1e565b5050565b600082905092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000610d6e8383610d27565b60408301905092915050565b6000604082019050919050565b610d9081610d42565b610d9a8184610d4d565b9250610da582610d58565b8060005b83811015610dde57610dbb8284610d13565b610dc58782610d62565b9650610dd083610d7a565b925050600181019050610da9565b505050505050565b6101008201610df86000830183610d13565b610e056000850182610d27565b50610e136040830183610d37565b610e206040850182610d87565b50610e2e60c0830183610d13565b610e3b60c0850182610d27565b50505050565b6000819050919050565b610e5481610e41565b8114610e5f57600080fd5b50565b600081359050610e7181610e4b565b92915050565b6000610e866020840184610e62565b905092915050565b610e9781610e41565b82525050565b610ea681610c61565b8114610eb157600080fd5b50565b600081359050610ec381610e9d565b92915050565b6000610ed86020840184610eb4565b905092915050565b610ee981610c61565b82525050565b6101408201610f016000830183610d08565b610f0e6000850182610de6565b50610f1d610100830183610e77565b610f2b610100850182610e8e565b50610f3a610120830183610ec9565b610f48610120850182610ee0565b50505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610f8b8385610f4e565b9350610f98838584610f5f565b610fa183610f6e565b840190509392505050565b600061016082019050610fc26000830186610eef565b818103610140830152610fd6818486610f7f565b9050949350505050565b600060208284031215610ff657610ff5610924565b5b600061100484828501610957565b91505092915050565b7f5265717569726520726563697069656e7420746f206265206761746577617900600082015250565b6000611043601f83610bd5565b915061104e8261100d565b602082019050919050565b6000602082019050818103600083015261107281611036565b9050919050565b6101c0820161108b6000830183610d08565b6110986000850182610de6565b506110a7610100830183610e77565b6110b5610100850182610e8e565b506110c4610120830183610e77565b6110d2610120850182610e8e565b506110e1610140830183610e77565b6110ef610140850182610e8e565b506110fe610160830183610e77565b61110c610160850182610e8e565b5061111b610180830183610ec9565b611129610180850182610ee0565b506111386101a0830183610ec9565b6111466101a0850182610ee0565b50505050565b600061115b6020840184610957565b905092915050565b61116c8161092e565b82525050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261119e5761119d61117c565b5b83810192508235915060208301925067ffffffffffffffff8211156111c6576111c5611172565b5b6001820236038313156111dc576111db611177565b5b509250929050565b600082825260208201905092915050565b600061120183856111e4565b935061120e838584610f5f565b61121783610f6e565b840190509392505050565b600060a08301611235600084018461114c565b6112426000860182611163565b506112506020840184610ec9565b61125d6020860182610ee0565b5061126b604084018461114c565b6112786040860182611163565b506112866060840184610ec9565b6112936060860182610ee0565b506112a16080840184611181565b85830360808701526112b48382846111f5565b925050508091505092915050565b60006101e0820190506112d86000830185611079565b8181036101c08301526112eb8184611222565b90509392505050565b60006020820190506113096000830184610c6b565b92915050565b6101c082016113216000830183610d08565b61132e6000850182610de6565b5061133d610100830183610e77565b61134b610100850182610e8e565b5061135a610120830183610e77565b611368610120850182610e8e565b50611377610140830183610e77565b611385610140850182610e8e565b50611394610160830183610e77565b6113a2610160850182610e8e565b506113b1610180830183610ec9565b6113bf610180850182610ee0565b506113ce6101a0830183610ec9565b6113dc6101a0850182610ee0565b50505050565b60006101e0820190506113f8600083018561130f565b8181036101c083015261140b8184611222565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b8381101561147757808201518184015260208101905061145c565b60008484015250505050565b600061148e82611443565b611498818561144e565b93506114a8818560208601611459565b80840191505092915050565b60006114c08284611483565b915081905092915050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b6000611501601383610bd5565b915061150c826114cb565b602082019050919050565b60006020820190508181036000830152611530816114f4565b905091905056fea2646970667358221220e6150706cefab59a8d960aa2fe9b384720cedf8a7b7e6b0a6bd8090f09100e2864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}