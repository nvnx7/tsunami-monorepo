{
  "address": "0x160c3dF382531dbF9eA391F32fB13AACc7B34C30",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "numLevels_",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "maxDepositAmount_",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hasher_",
          "type": "address"
        },
        {
          "internalType": "contract IVerifier",
          "name": "createVerifier_",
          "type": "address"
        },
        {
          "internalType": "contract IVerifier",
          "name": "withdrawVerifier_",
          "type": "address"
        },
        {
          "internalType": "contract IVerifier",
          "name": "revokeVerifier_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedOutput",
          "type": "bytes"
        }
      ],
      "name": "NewCommitment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifier",
          "type": "bytes32"
        }
      ],
      "name": "NewNullifier",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_EXT_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_EXT_AMOUNT_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "calculatePublicAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct DataTypes.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "commitment",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.CreateProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "encryptedOutput",
          "type": "bytes"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createVerifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct DataTypes.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "inputNullifier",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "outputCommitment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.RevokeProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "withdrawAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeVerifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct DataTypes.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "commitment",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.CreateProofArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "verifyCreateProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct DataTypes.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "inputNullifier",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "outputCommitment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.RevokeProofArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "verifyRevokeProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct DataTypes.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "inputNullifier",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "outputCommitment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "checkpointTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.WithdrawProofArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "verifyWithdrawProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct DataTypes.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "inputNullifier",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "outputCommitment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "checkpointTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.WithdrawProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "withdrawAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawVerifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x378f36e92a2979e7c3edb0fb092f687ef3478c917cbac8fa9c820be20643b4a1",
  "receipt": {
    "to": null,
    "from": "0x80630fBf405eD070F10c8fFE8E9A83C60736a770",
    "contractAddress": "0x160c3dF382531dbF9eA391F32fB13AACc7B34C30",
    "transactionIndex": 0,
    "gasUsed": "4132581",
    "logsBloom": "0x
    "blockHash": "0x3c5c9fa77082a59ef8a7ca598252778e177247c6486b2cb33ed8ebfb8fc5b3fa",
    "transactionHash": "0x378f36e92a2979e7c3edb0fb092f687ef3478c917cbac8fa9c820be20643b4a1",
    "logs": [],
    "blockNumber": 1627631,
    "cumulativeGasUsed": "4132581",
    "status": 1,
    "byzantium": true
  },
  "args": [
    20,
    "1000000000000000000",
    "0xfbe7a8FFD4EcB1678152bafb4915F1e5869178b0",
    "0x8d70862362d359cd2e2144719E441bAbc5F74583",
    "0xD6014DfDa594a19160598Dc2E67f5f5D49599FA9",
    "0x5a98a08555A977624845dcDD9Ae9BA7ACcd77f2B",
    "0x382566295077ca482Dc5d05f44Ee1B98a5C7E663"
  ],
  "numDeployments": 2,
  "solcInputHash": "cc70ac64159a5b356a43ac69967400fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"numLevels_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositAmount_\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hasher_\",\"type\":\"address\"},{\"internalType\":\"contract IVerifier\",\"name\":\"createVerifier_\",\"type\":\"address\"},{\"internalType\":\"contract IVerifier\",\"name\":\"withdrawVerifier_\",\"type\":\"address\"},{\"internalType\":\"contract IVerifier\",\"name\":\"revokeVerifier_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"name\":\"NewCommitment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"}],\"name\":\"NewNullifier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EXT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_EXT_AMOUNT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"calculatePublicAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct DataTypes.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CreateProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVerifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct DataTypes.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RevokeProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeVerifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct DataTypes.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CreateProofArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"verifyCreateProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct DataTypes.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RevokeProofArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"verifyRevokeProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct DataTypes.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpointTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.WithdrawProofArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"verifyWithdrawProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct DataTypes.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpointTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.WithdrawProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVerifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"zeros(uint256)\":{\"details\":\"Zero elements for poseidon hash based merkle tree\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tsunami.sol\":\"Tsunami\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/MerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IHasher.sol\\\";\\n\\ncontract MerkleTree {\\n    uint256 public constant FIELD_SIZE =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    // keccak256(\\\"tornado\\\") % FIELD_SIZE\\n    uint256 public constant ZERO_VALUE =\\n        21663839004416932945382355908790599225266501822907911457504978515578255421292;\\n\\n    uint32 public constant ROOT_HISTORY_SIZE = 100;\\n\\n    IHasher public immutable hasher;\\n    uint256 public immutable numLevels;\\n\\n    // the following variables are made public for easier testing and debugging and\\n    // are not supposed to be accessed in regular code\\n    // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n    // it removes index range check on every interaction\\n    mapping(uint256 => bytes32) public filledSubtrees;\\n    mapping(uint256 => bytes32) public roots;\\n\\n    uint32 public currentRootIndex;\\n    uint32 public nextIndex;\\n\\n    constructor(uint256 numLevels_, address hasher_) {\\n        require(numLevels_ > 0, \\\"Levels should be greater than zero\\\");\\n        require(numLevels_ < 32, \\\"Levels should be less than 32\\\");\\n        numLevels = numLevels_;\\n        hasher = IHasher(hasher_);\\n        for (uint256 i = 0; i < numLevels; i++) {\\n            filledSubtrees[i] = zeros(i);\\n        }\\n        roots[0] = zeros(numLevels);\\n    }\\n\\n    function hashLeftRight(bytes32 left, bytes32 right)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        require(uint256(left) < FIELD_SIZE, \\\"Left should be inside the field\\\");\\n        require(\\n            uint256(right) < FIELD_SIZE,\\n            \\\"Right should be inside the field\\\"\\n        );\\n\\n        bytes32[2] memory input;\\n        input[0] = left;\\n        input[1] = right;\\n\\n        return hasher.poseidon(input);\\n    }\\n\\n    function _insert(bytes32 leaf) internal returns (uint32 index) {\\n        uint32 _nextIndex = nextIndex;\\n        require(_nextIndex != 2**numLevels, \\\"Merkle tree is full\\\");\\n\\n        uint32 currentIndex = _nextIndex;\\n        bytes32 currentLevelHash = leaf;\\n        bytes32 left;\\n        bytes32 right;\\n\\n        for (uint32 i = 0; i < numLevels; i++) {\\n            if (currentIndex % 2 == 0) {\\n                left = currentLevelHash;\\n                right = zeros(i);\\n                filledSubtrees[i] = currentLevelHash;\\n            } else {\\n                left = filledSubtrees[i];\\n                right = currentLevelHash;\\n            }\\n\\n            // Current level hash accumulates hashes from bottom to top.\\n            // At top it becomes the root of merkle tree.\\n            currentLevelHash = hashLeftRight(left, right);\\n\\n            // This alternates the nodes (left and right) at each level.\\n            currentIndex /= 2;\\n        }\\n\\n        // Older roots are overwritten by newer ones when size limit hits ROOT_HISTORY_SIZE.\\n        uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n        currentRootIndex = newRootIndex;\\n        roots[newRootIndex] = currentLevelHash;\\n        nextIndex = _nextIndex + 1;\\n        return _nextIndex;\\n    }\\n\\n    /**\\n     * @dev Whether the root is present in the root history\\n     */\\n    function isKnownRoot(bytes32 root) public view returns (bool) {\\n        if (root == 0) {\\n            return false;\\n        }\\n        uint32 _currentRootIndex = currentRootIndex;\\n        uint256 i = _currentRootIndex;\\n        do {\\n            if (root == roots[i]) {\\n                return true;\\n            }\\n            if (i == 0) {\\n                i = ROOT_HISTORY_SIZE;\\n            }\\n            i--;\\n        } while (i != _currentRootIndex);\\n        return false;\\n    }\\n\\n    function getLastRoot() public view returns (bytes32) {\\n        return roots[currentRootIndex];\\n    }\\n\\n    /**\\n     * @dev Zero elements for poseidon hash based merkle tree\\n     */\\n    function zeros(uint256 i) public pure returns (bytes32) {\\n        if (i == 0)\\n            return\\n                0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c;\\n        else if (i == 1)\\n            return\\n                0x13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f8;\\n        else if (i == 2)\\n            return\\n                0x217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc622765;\\n        else if (i == 3)\\n            return\\n                0x0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee;\\n        else if (i == 4)\\n            return\\n                0x27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa5013587;\\n        else if (i == 5)\\n            return\\n                0x194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc;\\n        else if (i == 6)\\n            return\\n                0x1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f;\\n        else if (i == 7)\\n            return\\n                0x267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef999219;\\n        else if (i == 8)\\n            return\\n                0x1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d;\\n        else if (i == 9)\\n            return\\n                0x0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce;\\n        else if (i == 10)\\n            return\\n                0x2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad7;\\n        else if (i == 11)\\n            return\\n                0x280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b47;\\n        else if (i == 12)\\n            return\\n                0x045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b;\\n        else if (i == 13)\\n            return\\n                0x27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d366;\\n        else if (i == 14)\\n            return\\n                0x1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef;\\n        else if (i == 15)\\n            return\\n                0x20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca;\\n        else if (i == 16)\\n            return\\n                0x09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec;\\n        else if (i == 17)\\n            return\\n                0x0064b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b;\\n        else if (i == 18)\\n            return\\n                0x095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f;\\n        else if (i == 19)\\n            return\\n                0x11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b63;\\n        else if (i == 20)\\n            return\\n                0x2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb;\\n        else if (i == 21)\\n            return\\n                0x16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b13279;\\n        else if (i == 22)\\n            return\\n                0x21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff;\\n        else if (i == 23)\\n            return\\n                0x2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d9962;\\n        else if (i == 24)\\n            return\\n                0x16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc10;\\n        else if (i == 25)\\n            return\\n                0x2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a013;\\n        else if (i == 26)\\n            return\\n                0x2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac14;\\n        else if (i == 27)\\n            return\\n                0x0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc0;\\n        else if (i == 28)\\n            return\\n                0x202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d50;\\n        else if (i == 29)\\n            return\\n                0x23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f187;\\n        else if (i == 30)\\n            return\\n                0x1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa0;\\n        else if (i == 31)\\n            return\\n                0x1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad06;\\n        else if (i == 32)\\n            return\\n                0x25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e6;\\n        else revert(\\\"Index out of bounds\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x42d7f632d0537824ec26424b249b5850b7a0f71a0e2a6a6e770678a81f675580\",\"license\":\"MIT\"},\"contracts/Tsunami.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IVerifier.sol\\\";\\nimport \\\"./interfaces/ITsunami.sol\\\";\\nimport \\\"./MerkleTree.sol\\\";\\nimport {DataTypes} from \\\"./types/DataTypes.sol\\\";\\n\\ncontract Tsunami is ITsunami, MerkleTree, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant MAX_EXT_AMOUNT = 2**248;\\n    uint256 public constant MAX_FEE = 2**248;\\n    uint256 public constant MIN_EXT_AMOUNT_LIMIT = 0.5 ether;\\n\\n    IVerifier public immutable createVerifier;\\n    IVerifier public immutable withdrawVerifier;\\n    IVerifier public immutable revokeVerifier;\\n    IERC20 public immutable token;\\n\\n    uint256 public maxDepositAmount;\\n    mapping(bytes32 => bool) public nullifierHashes;\\n\\n    constructor(\\n        uint32 numLevels_,\\n        uint256 maxDepositAmount_,\\n        IERC20 token_,\\n        address hasher_,\\n        IVerifier createVerifier_,\\n        IVerifier withdrawVerifier_,\\n        IVerifier revokeVerifier_\\n    ) MerkleTree(numLevels_, hasher_) {\\n        createVerifier = createVerifier_;\\n        withdrawVerifier = withdrawVerifier_;\\n        revokeVerifier = revokeVerifier_;\\n        token = token_;\\n        maxDepositAmount = maxDepositAmount_;\\n    }\\n\\n    function create(DataTypes.CreateProofArgs calldata args, bytes calldata encryptedOutput)\\n        external\\n    {\\n        require(verifyCreateProof(args), \\\"Invalid create proof\\\");\\n        token.safeTransferFrom(msg.sender, address(this), args.publicAmount);\\n        uint32 index = _insert(args.commitment);\\n        emit NewCommitment(args.commitment, index, encryptedOutput);\\n    }\\n\\n    function withdraw(DataTypes.WithdrawProofArgs calldata args, DataTypes.ExtData calldata extData)\\n        external\\n    {\\n        _transactWithdraw(args, extData);\\n    }\\n\\n    function revoke(DataTypes.RevokeProofArgs calldata args, DataTypes.ExtData calldata extData)\\n        external\\n    {\\n        _transactRevoke(args, extData);\\n    }\\n\\n    function isSpent(bytes32 nullifierHash) public view returns (bool) {\\n        return nullifierHashes[nullifierHash];\\n    }\\n\\n    function calculatePublicAmount(uint256 withdrawAmount, uint256 fee)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        require(fee < MAX_FEE, \\\"Invalid fee\\\");\\n        require(withdrawAmount < MAX_EXT_AMOUNT, \\\"Invalid ext amount\\\");\\n        return withdrawAmount + fee;\\n    }\\n\\n    function verifyCreateProof(DataTypes.CreateProofArgs calldata args) public view returns (bool) {\\n        return\\n            createVerifier.verifyProof(\\n                args.proof.a,\\n                args.proof.b,\\n                args.proof.c,\\n                [args.publicAmount, uint256(args.commitment)]\\n            );\\n    }\\n\\n    function verifyWithdrawProof(DataTypes.WithdrawProofArgs calldata args)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return\\n            withdrawVerifier.verifyProof(\\n                args.proof.a,\\n                args.proof.b,\\n                args.proof.c,\\n                [\\n                    uint256(args.root),\\n                    args.publicAmount,\\n                    uint256(args.extDataHash),\\n                    uint256(args.inputNullifier),\\n                    args.checkpointTime,\\n                    uint256(args.outputCommitment)\\n                ]\\n            );\\n    }\\n\\n    function verifyRevokeProof(DataTypes.RevokeProofArgs calldata args) public view returns (bool) {\\n        return\\n            revokeVerifier.verifyProof(\\n                args.proof.a,\\n                args.proof.b,\\n                args.proof.c,\\n                [\\n                    uint256(args.root),\\n                    args.publicAmount,\\n                    uint256(args.extDataHash),\\n                    uint256(args.inputNullifier),\\n                    args.stopTime,\\n                    uint256(args.outputCommitment)\\n                ]\\n            );\\n    }\\n\\n    function _transactWithdraw(\\n        DataTypes.WithdrawProofArgs calldata args,\\n        DataTypes.ExtData calldata extData\\n    ) internal nonReentrant {\\n        require(isKnownRoot(args.root), \\\"Invalid merkle root\\\");\\n        require(!isSpent(args.inputNullifier), \\\"Input is already spent\\\");\\n        require(args.checkpointTime <= block.timestamp, \\\"Early withdraw\\\");\\n        require(\\n            uint256(args.extDataHash) == uint256(keccak256(abi.encode(extData))) % FIELD_SIZE,\\n            \\\"Incorrect external data hash\\\"\\n        );\\n        require(\\n            args.publicAmount == calculatePublicAmount(extData.withdrawAmount, extData.fee),\\n            \\\"Invalid public amount\\\"\\n        );\\n        require(extData.recipient != address(0), \\\"Cannot withdraw to zero address\\\");\\n        require(verifyWithdrawProof(args), \\\"Invalid transaction proof\\\");\\n\\n        nullifierHashes[args.inputNullifier] = true;\\n\\n        token.safeTransfer(extData.recipient, uint256(extData.withdrawAmount));\\n\\n        if (extData.fee > 0) {\\n            token.safeTransfer(extData.relayer, extData.fee);\\n        }\\n\\n        uint32 index = _insert(args.outputCommitment);\\n\\n        emit NewCommitment(args.outputCommitment, index, extData.encryptedOutput);\\n        emit NewNullifier(args.inputNullifier);\\n    }\\n\\n    function _transactRevoke(\\n        DataTypes.RevokeProofArgs calldata args,\\n        DataTypes.ExtData calldata extData\\n    ) internal nonReentrant {\\n        require(isKnownRoot(args.root), \\\"Invalid merkle root\\\");\\n        require(!isSpent(args.inputNullifier), \\\"Input is already spent\\\");\\n        require(args.stopTime >= block.timestamp, \\\"Early revoke\\\");\\n        require(\\n            uint256(args.extDataHash) == uint256(keccak256(abi.encode(extData))) % FIELD_SIZE,\\n            \\\"Incorrect external data hash\\\"\\n        );\\n        require(\\n            args.publicAmount == calculatePublicAmount(extData.withdrawAmount, extData.fee),\\n            \\\"Invalid public amount\\\"\\n        );\\n        require(extData.recipient != address(0), \\\"Cannot withdraw to zero address\\\");\\n        require(verifyRevokeProof(args), \\\"Invalid transaction proof\\\");\\n\\n        nullifierHashes[args.inputNullifier] = true;\\n\\n        token.safeTransfer(extData.recipient, uint256(extData.withdrawAmount));\\n\\n        if (extData.fee > 0) {\\n            token.safeTransfer(extData.relayer, extData.fee);\\n        }\\n\\n        uint32 index = _insert(args.outputCommitment);\\n\\n        emit NewCommitment(args.outputCommitment, index, extData.encryptedOutput);\\n        emit NewNullifier(args.inputNullifier);\\n    }\\n}\\n\",\"keccak256\":\"0x74b385a2d93a36f29789821b0e5f6f0f38790b4493bc4e7ebc239c57cc527b7c\",\"license\":\"MIT\"},\"contracts/interfaces/IHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IHasher {\\n    function poseidon(bytes32[2] calldata inputs)\\n        external\\n        pure\\n        returns (bytes32);\\n}\\n\",\"keccak256\":\"0x191beaa88be556c13ec8179f0b6e4e7a4fd986b3ba1ebbf45bfe4f749869f807\",\"license\":\"MIT\"},\"contracts/interfaces/ITsunami.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\ninterface ITsunami {\\n    event NewCommitment(bytes32 commitment, uint256 leafIndex, bytes encryptedOutput);\\n    event NewNullifier(bytes32 nullifier);\\n\\n    function create(DataTypes.CreateProofArgs calldata args, bytes calldata encryptedOutput)\\n        external;\\n\\n    function withdraw(DataTypes.WithdrawProofArgs calldata args, DataTypes.ExtData calldata extData)\\n        external;\\n\\n    function revoke(DataTypes.RevokeProofArgs calldata args, DataTypes.ExtData calldata extData)\\n        external;\\n}\\n\",\"keccak256\":\"0x662613a285272dff271892b7a9511dfcaea901b958541b8ea3e65bc500f59dd5\",\"license\":\"MIT\"},\"contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IVerifier {\\n    // Proposal\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[2] memory inputs\\n    ) external view returns (bool r);\\n\\n    // Withdraw\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[6] memory inputs\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xb3d5d778c60a29765a38fe5e61b2e5f4ab89b5a88a6d211dedf68b71acb0241f\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary DataTypes {\\n    struct ExtData {\\n        address recipient;\\n        uint256 withdrawAmount;\\n        address relayer;\\n        uint256 fee;\\n        bytes encryptedOutput;\\n    }\\n\\n    struct Proof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n    }\\n\\n    struct WithdrawProofArgs {\\n        Proof proof;\\n        bytes32 root;\\n        bytes32 inputNullifier;\\n        bytes32 outputCommitment;\\n        bytes32 extDataHash;\\n        uint256 publicAmount;\\n        uint256 checkpointTime;\\n    }\\n\\n    struct RevokeProofArgs {\\n        Proof proof;\\n        bytes32 root;\\n        bytes32 inputNullifier;\\n        bytes32 outputCommitment;\\n        bytes32 extDataHash;\\n        uint256 publicAmount;\\n        uint256 stopTime;\\n    }\\n\\n    struct CreateProofArgs {\\n        Proof proof;\\n        bytes32 commitment;\\n        uint256 publicAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xfbc127c4256ceebb96f3c6b4acd44bc8a1a4b4c0b5f85875b9352086c5eb1886\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162004e0338038062004e03833981810160405281019062000038919062000af5565b8663ffffffff16846000821162000086576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200007d9062000c2f565b60405180910390fd5b60208210620000cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c39062000ca1565b60405180910390fd5b8160a081815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060005b60a051811015620001535762000127816200026e60201b60201c565b6000808381526020019081526020016000208190555080806200014a9062000cf2565b9150506200010b565b506200016760a0516200026e60201b60201c565b6001600080815260200190815260200160002081905550505060016003819055508273ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff1681525050856004819055505050505050505062000db1565b6000808203620002a4577f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c60001b905062000980565b60018203620002d9577f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f860001b905062000980565b600282036200030e577f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc62276560001b905062000980565b6003820362000343577f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee60001b905062000980565b6004820362000378577f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa501358760001b905062000980565b60058203620003ad577f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc60001b905062000980565b60068203620003e2577f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f60001b905062000980565b6007820362000417577f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef99921960001b905062000980565b600882036200044c577f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d60001b905062000980565b6009820362000481577f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce60001b905062000980565b600a8203620004b6577f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad760001b905062000980565b600b8203620004eb577f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b4760001b905062000980565b600c820362000520577f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b60001b905062000980565b600d820362000555577f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d36660001b905062000980565b600e82036200058a577f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef60001b905062000980565b600f8203620005bf577f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca60001b905062000980565b60108203620005f4577f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec60001b905062000980565b6011820362000628577e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b60001b905062000980565b601282036200065d577f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f60001b905062000980565b6013820362000692577f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b6360001b905062000980565b60148203620006c7577f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb60001b905062000980565b60158203620006fc577f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b1327960001b905062000980565b6016820362000731577f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff60001b905062000980565b6017820362000766577f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d996260001b905062000980565b601882036200079b577f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc1060001b905062000980565b60198203620007d0577f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a01360001b905062000980565b601a820362000805577f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac1460001b905062000980565b601b82036200083a577f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc060001b905062000980565b601c82036200086f577f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d5060001b905062000980565b601d8203620008a4577f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f18760001b905062000980565b601e8203620008d9577f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa060001b905062000980565b601f82036200090e577f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad0660001b905062000980565b6020820362000943577f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e660001b905062000980565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009779062000d8f565b60405180910390fd5b919050565b600080fd5b600063ffffffff82169050919050565b620009a5816200098a565b8114620009b157600080fd5b50565b600081519050620009c5816200099a565b92915050565b6000819050919050565b620009e081620009cb565b8114620009ec57600080fd5b50565b60008151905062000a0081620009d5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000a338262000a06565b9050919050565b600062000a478262000a26565b9050919050565b62000a598162000a3a565b811462000a6557600080fd5b50565b60008151905062000a798162000a4e565b92915050565b62000a8a8162000a26565b811462000a9657600080fd5b50565b60008151905062000aaa8162000a7f565b92915050565b600062000abd8262000a26565b9050919050565b62000acf8162000ab0565b811462000adb57600080fd5b50565b60008151905062000aef8162000ac4565b92915050565b600080600080600080600060e0888a03121562000b175762000b1662000985565b5b600062000b278a828b01620009b4565b975050602062000b3a8a828b01620009ef565b965050604062000b4d8a828b0162000a68565b955050606062000b608a828b0162000a99565b945050608062000b738a828b0162000ade565b93505060a062000b868a828b0162000ade565b92505060c062000b998a828b0162000ade565b91505092959891949750929550565b600082825260208201905092915050565b7f4c6576656c732073686f756c642062652067726561746572207468616e207a6560008201527f726f000000000000000000000000000000000000000000000000000000000000602082015250565b600062000c1760228362000ba8565b915062000c248262000bb9565b604082019050919050565b6000602082019050818103600083015262000c4a8162000c08565b9050919050565b7f4c6576656c732073686f756c64206265206c657373207468616e203332000000600082015250565b600062000c89601d8362000ba8565b915062000c968262000c51565b602082019050919050565b6000602082019050818103600083015262000cbc8162000c7a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000cff82620009cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362000d345762000d3362000cc3565b5b600182019050919050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b600062000d7760138362000ba8565b915062000d848262000d3f565b602082019050919050565b6000602082019050818103600083015262000daa8162000d68565b9050919050565b60805160a05160c05160e0516101005161012051613fb562000e4e600039600081816108900152818161164701528181611c1101528181611c7f0152818161206701526120d50152600081816106260152610c9d015260008181610cc30152610df60152600081816107370152610b08015260008181610eb80152818161172201526117a6015260008181610a41015261160b0152613fb56000f3fe608060405234801561001057600080fd5b50600436106101d95760003560e01c806390eeb02b11610104578063e1faa146116100a2578063ed33639f11610071578063ed33639f14610598578063f178e47c146105b6578063fc0c546a146105e6578063fc7e9c6f14610604576101d9565b8063e1faa146146104fe578063e5285dcc1461051a578063e82955881461054a578063ec7329591461057a576101d9565b8063bc063e1a116100de578063bc063e1a14610474578063c2b40ae414610492578063cd87a3b4146104c2578063e013eb01146104e0576101d9565b806390eeb02b1461041c578063a452eac31461043a578063ba70f75714610456576101d9565b8063453827c61161017c57806376b53d991161014b57806376b53d99146103925780637fe24ffe146103c2578063864eb164146103e05780638ed83271146103fe576101d9565b8063453827c6146102f657806354442a90146103145780636d9833e3146103445780637236f47114610374576101d9565b80632d08050a116101b85780632d08050a1461026e578063386dc0831461028c57806338bf282e146102a8578063414a37ba146102d8576101d9565b806205c421146101de5780631514ff1d1461020e57806317cc915c1461023e575b600080fd5b6101f860048036038101906101f39190612589565b610622565b60405161020591906125d2565b60405180910390f35b6102286004803603810190610223919061260d565b610733565b60405161023591906125d2565b60405180910390f35b61025860048036038101906102539190612671565b61080f565b60405161026591906125d2565b60405180910390f35b61027661082f565b60405161028391906126b7565b60405180910390f35b6102a660048036038101906102a19190612737565b61083b565b005b6102c260048036038101906102bd9190612799565b61092f565b6040516102cf91906127e8565b60405180910390f35b6102e0610ae2565b6040516102ed91906126b7565b60405180910390f35b6102fe610b06565b60405161030b9190612882565b60405180910390f35b61032e600480360381019061032991906128c9565b610b2a565b60405161033b91906126b7565b60405180910390f35b61035e60048036038101906103599190612671565b610c04565b60405161036b91906125d2565b60405180910390f35b61037c610c9b565b6040516103899190612882565b60405180910390f35b6103ac60048036038101906103a79190612929565b610cbf565b6040516103b991906125d2565b60405180910390f35b6103ca610dd0565b6040516103d791906126b7565b60405180910390f35b6103e8610df4565b6040516103f59190612882565b60405180910390f35b610406610e18565b60405161041391906126b7565b60405180910390f35b610424610e1e565b6040516104319190612976565b60405180910390f35b610454600480360381019061044f91906129b0565b610e34565b005b61045e610e42565b60405161046b91906127e8565b60405180910390f35b61047c610e75565b60405161048991906126b7565b60405180910390f35b6104ac60048036038101906104a79190612a0e565b610e99565b6040516104b991906127e8565b60405180910390f35b6104ca610eb1565b6040516104d79190612976565b60405180910390f35b6104e8610eb6565b6040516104f591906126b7565b60405180910390f35b61051860048036038101906105139190612a3b565b610eda565b005b610534600480360381019061052f9190612671565b610ee8565b60405161054191906125d2565b60405180910390f35b610564600480360381019061055f9190612a0e565b610f12565b60405161057191906127e8565b60405180910390f35b6105826115e5565b60405161058f91906126b7565b60405180910390f35b6105a0611609565b6040516105ad9190612aba565b60405180910390f35b6105d060048036038101906105cb9190612a0e565b61162d565b6040516105dd91906127e8565b60405180910390f35b6105ee611645565b6040516105fb9190612af6565b60405180910390f35b61060c611669565b6040516106199190612976565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f398789b83600001600001846000016040018560000160c0016040518060c0016040528088610100013560001c8152602001886101800135815260200188610160013560001c815260200188610120013560001c8152602001886101a00135815260200188610140013560001c8152506040518563ffffffff1660e01b81526004016106eb9493929190612c94565b602060405180830381865afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190612d07565b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5c9d69e83600001600001846000016040018560000160c0016040518060400160405280886101200135815260200188610100013560001c8152506040518563ffffffff1660e01b81526004016107c79493929190612db8565b602060405180830381865afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190612d07565b9050919050565b60056020528060005260406000206000915054906101000a900460ff1681565b6706f05b59d3b2000081565b61084483610733565b610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a90612e5c565b60405180910390fd5b6108d533308561012001357f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661167f909392919063ffffffff16565b60006108e5846101000135611708565b90507ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd8461010001358285856040516109219493929190612f0b565b60405180910390a150505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c10610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098d90612f97565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260001c106109fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f290613003565b60405180910390fd5b610a03612538565b8381600060028110610a1857610a17613023565b5b6020020181815250508281600160028110610a3657610a35613023565b5b6020020181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663299e5660826040518263ffffffff1660e01b8152600401610a9891906130fd565b602060405180830381865afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad9919061312d565b91505092915050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01000000000000000000000000000000000000000000000000000000000000008210610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b85906131a6565b60405180910390fd5b7f01000000000000000000000000000000000000000000000000000000000000008310610bf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be790613212565b60405180910390fd5b8183610bfc9190613261565b905092915050565b60008060001b8203610c195760009050610c96565b6000600260009054906101000a900463ffffffff16905060008163ffffffff1690505b60016000828152602001908152602001600020548403610c6157600192505050610c96565b60008103610c7457606463ffffffff1690505b8080610c7f90613295565b9150508163ffffffff168103610c3c576000925050505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f398789b83600001600001846000016040018560000160c0016040518060c0016040528088610100013560001c8152602001886101800135815260200188610160013560001c815260200188610120013560001c8152602001886101a00135815260200188610140013560001c8152506040518563ffffffff1660e01b8152600401610d889493929190612c94565b602060405180830381865afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190612d07565b9050919050565b7f010000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045481565b600260009054906101000a900463ffffffff1681565b610e3e8282611919565b5050565b600060016000600260009054906101000a900463ffffffff1663ffffffff16815260200190815260200160002054905090565b7f010000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b606481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ee48282611d6f565b5050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000808203610f46577f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c60001b90506115e0565b60018203610f79577f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f860001b90506115e0565b60028203610fac577f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc62276560001b90506115e0565b60038203610fdf577f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee60001b90506115e0565b60048203611012577f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa501358760001b90506115e0565b60058203611045577f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc60001b90506115e0565b60068203611078577f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f60001b90506115e0565b600782036110ab577f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef99921960001b90506115e0565b600882036110de577f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d60001b90506115e0565b60098203611111577f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce60001b90506115e0565b600a8203611144577f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad760001b90506115e0565b600b8203611177577f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b4760001b90506115e0565b600c82036111aa577f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b60001b90506115e0565b600d82036111dd577f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d36660001b90506115e0565b600e8203611210577f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef60001b90506115e0565b600f8203611243577f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca60001b90506115e0565b60108203611276577f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec60001b90506115e0565b601182036112a8577e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b60001b90506115e0565b601282036112db577f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f60001b90506115e0565b6013820361130e577f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b6360001b90506115e0565b60148203611341577f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb60001b90506115e0565b60158203611374577f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b1327960001b90506115e0565b601682036113a7577f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff60001b90506115e0565b601782036113da577f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d996260001b90506115e0565b6018820361140d577f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc1060001b90506115e0565b60198203611440577f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a01360001b90506115e0565b601a8203611473577f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac1460001b90506115e0565b601b82036114a6577f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc060001b90506115e0565b601c82036114d9577f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d5060001b90506115e0565b601d820361150c577f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f18760001b90506115e0565b601e820361153f577f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa060001b90506115e0565b601f8203611572577f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad0660001b90506115e0565b602082036115a5577f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e660001b90506115e0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d79061330a565b60405180910390fd5b919050565b7f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260049054906101000a900463ffffffff1681565b611702846323b872dd60e01b8585856040516024016116a09392919061334b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121c5565b50505050565b600080600260049054906101000a900463ffffffff1690507f0000000000000000000000000000000000000000000000000000000000000000600261174d91906134b5565b8163ffffffff1603611794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178b9061354c565b60405180910390fd5b6000819050600084905060008060005b7f00000000000000000000000000000000000000000000000000000000000000008163ffffffff16101561186f5760006002866117e1919061359b565b63ffffffff1603611822578392506117fe8163ffffffff16610f12565b9150836000808363ffffffff16815260200190815260200160002081905550611841565b6000808263ffffffff1681526020019081526020016000205492508391505b61184b838361092f565b935060028561185a91906135cc565b94508080611867906135fd565b9150506117a4565b50600060646001600260009054906101000a900463ffffffff166118939190613629565b61189d919061359b565b905080600260006101000a81548163ffffffff021916908363ffffffff16021790555083600160008363ffffffff168152602001908152602001600020819055506001866118eb9190613629565b600260046101000a81548163ffffffff021916908363ffffffff160217905550859650505050505050919050565b61192161228c565b61192f826101000135610c04565b61196e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611965906136ad565b60405180910390fd5b61197c826101200135610ee8565b156119bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b390613719565b60405180910390fd5b42826101a001351015611a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fb90613785565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181604051602001611a36919061395e565b6040516020818303038152906040528051906020012060001c611a599190613980565b82610160013560001c14611aa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a99906139fd565b60405180910390fd5b611ab481602001358260600135610b2a565b82610180013514611afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af190613a69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816000016020810190611b259190613a89565b73ffffffffffffffffffffffffffffffffffffffff1603611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7290613b02565b60405180910390fd5b611b8482610622565b611bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bba90613b6e565b60405180910390fd5b600160056000846101200135815260200190815260200160002060006101000a81548160ff021916908315150217905550611c55816000016020810190611c0a9190613a89565b82602001357f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166122db9092919063ffffffff16565b600081606001351115611cc457611cc3816040016020810190611c789190613a89565b82606001357f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166122db9092919063ffffffff16565b5b6000611cd4836101400135611708565b90507ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd83610140013582848060800190611d0e9190613b9d565b604051611d1e9493929190612f0b565b60405180910390a17f5e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297ce836101200135604051611d5a91906127e8565b60405180910390a150611d6b612361565b5050565b611d7761228c565b611d85826101000135610c04565b611dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbb906136ad565b60405180910390fd5b611dd2826101200135610ee8565b15611e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0990613719565b60405180910390fd5b42826101a001351115611e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5190613c4c565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181604051602001611e8c919061395e565b6040516020818303038152906040528051906020012060001c611eaf9190613980565b82610160013560001c14611ef8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eef906139fd565b60405180910390fd5b611f0a81602001358260600135610b2a565b82610180013514611f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4790613a69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816000016020810190611f7b9190613a89565b73ffffffffffffffffffffffffffffffffffffffff1603611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc890613b02565b60405180910390fd5b611fda82610cbf565b612019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201090613b6e565b60405180910390fd5b600160056000846101200135815260200190815260200160002060006101000a81548160ff0219169083151502179055506120ab8160000160208101906120609190613a89565b82602001357f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166122db9092919063ffffffff16565b60008160600135111561211a576121198160400160208101906120ce9190613a89565b82606001357f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166122db9092919063ffffffff16565b5b600061212a836101400135611708565b90507ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd836101400135828480608001906121649190613b9d565b6040516121749493929190612f0b565b60405180910390a17f5e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297ce8361012001356040516121b091906127e8565b60405180910390a1506121c1612361565b5050565b6000612227826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661236b9092919063ffffffff16565b905060008151111561228757808060200190518101906122479190612d07565b612286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227d90613cde565b60405180910390fd5b5b505050565b6002600354036122d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c890613d4a565b60405180910390fd5b6002600381905550565b61235c8363a9059cbb60e01b84846040516024016122fa929190613d6a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121c5565b505050565b6001600381905550565b606061237a8484600085612383565b90509392505050565b6060824710156123c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bf90613e05565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516123f19190613e96565b60006040518083038185875af1925050503d806000811461242e576040519150601f19603f3d011682016040523d82523d6000602084013e612433565b606091505b509150915061244487838387612450565b92505050949350505050565b606083156124b25760008351036124aa5761246a856124c5565b6124a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a090613ef9565b60405180910390fd5b5b8290506124bd565b6124bc83836124e8565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156124fb5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252f9190613f5d565b60405180910390fd5b6040518060400160405280600290602082028036833780820191505090505090565b600080fd5b600080fd5b600080fd5b60006101c082840312156125805761257f612564565b5b81905092915050565b60006101c082840312156125a05761259f61255a565b5b60006125ae84828501612569565b91505092915050565b60008115159050919050565b6125cc816125b7565b82525050565b60006020820190506125e760008301846125c3565b92915050565b6000610140828403121561260457612603612564565b5b81905092915050565b600061014082840312156126245761262361255a565b5b6000612632848285016125ed565b91505092915050565b6000819050919050565b61264e8161263b565b811461265957600080fd5b50565b60008135905061266b81612645565b92915050565b6000602082840312156126875761268661255a565b5b60006126958482850161265c565b91505092915050565b6000819050919050565b6126b18161269e565b82525050565b60006020820190506126cc60008301846126a8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126126f7576126f66126d2565b5b8235905067ffffffffffffffff811115612714576127136126d7565b5b6020830191508360018202830111156127305761272f6126dc565b5b9250929050565b600080600061016084860312156127515761275061255a565b5b600061275f868287016125ed565b93505061014084013567ffffffffffffffff8111156127815761278061255f565b5b61278d868287016126e1565b92509250509250925092565b600080604083850312156127b0576127af61255a565b5b60006127be8582860161265c565b92505060206127cf8582860161265c565b9150509250929050565b6127e28161263b565b82525050565b60006020820190506127fd60008301846127d9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061284861284361283e84612803565b612823565b612803565b9050919050565b600061285a8261282d565b9050919050565b600061286c8261284f565b9050919050565b61287c81612861565b82525050565b60006020820190506128976000830184612873565b92915050565b6128a68161269e565b81146128b157600080fd5b50565b6000813590506128c38161289d565b92915050565b600080604083850312156128e0576128df61255a565b5b60006128ee858286016128b4565b92505060206128ff858286016128b4565b9150509250929050565b60006101c082840312156129205761291f612564565b5b81905092915050565b60006101c082840312156129405761293f61255a565b5b600061294e84828501612909565b91505092915050565b600063ffffffff82169050919050565b61297081612957565b82525050565b600060208201905061298b6000830184612967565b92915050565b600060a082840312156129a7576129a6612564565b5b81905092915050565b6000806101e083850312156129c8576129c761255a565b5b60006129d685828601612569565b9250506101c083013567ffffffffffffffff8111156129f8576129f761255f565b5b612a0485828601612991565b9150509250929050565b600060208284031215612a2457612a2361255a565b5b6000612a32848285016128b4565b91505092915050565b6000806101e08385031215612a5357612a5261255a565b5b6000612a6185828601612909565b9250506101c083013567ffffffffffffffff811115612a8357612a8261255f565b5b612a8f85828601612991565b9150509250929050565b6000612aa48261284f565b9050919050565b612ab481612a99565b82525050565b6000602082019050612acf6000830184612aab565b92915050565b6000612ae08261284f565b9050919050565b612af081612ad5565b82525050565b6000602082019050612b0b6000830184612ae7565b92915050565b82818337505050565b612b2660408383612b11565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b612b5660408383612b11565b5050565b6000612b668383612b4a565b60408301905092915050565b600082905092915050565b6000604082019050919050565b612b9381612b2a565b612b9d8184612b35565b9250612ba882612b40565b8060005b83811015612be157612bbe8284612b72565b612bc88782612b5a565b9650612bd383612b7d565b925050600181019050612bac565b505050505050565b600060069050919050565b600081905092915050565b6000819050919050565b612c128161269e565b82525050565b6000612c248383612c09565b60208301905092915050565b6000602082019050919050565b612c4681612be9565b612c508184612bf4565b9250612c5b82612bff565b8060005b83811015612c8c578151612c738782612c18565b9650612c7e83612c30565b925050600181019050612c5f565b505050505050565b60006101c082019050612caa6000830187612b1a565b612cb76040830186612b8a565b612cc460c0830185612b1a565b612cd2610100830184612c3d565b95945050505050565b612ce4816125b7565b8114612cef57600080fd5b50565b600081519050612d0181612cdb565b92915050565b600060208284031215612d1d57612d1c61255a565b5b6000612d2b84828501612cf2565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b612d6a81612d34565b612d748184612d3f565b9250612d7f82612d4a565b8060005b83811015612db0578151612d978782612c18565b9650612da283612d54565b925050600181019050612d83565b505050505050565b600061014082019050612dce6000830187612b1a565b612ddb6040830186612b8a565b612de860c0830185612b1a565b612df6610100830184612d61565b95945050505050565b600082825260208201905092915050565b7f496e76616c6964206372656174652070726f6f66000000000000000000000000600082015250565b6000612e46601483612dff565b9150612e5182612e10565b602082019050919050565b60006020820190508181036000830152612e7581612e39565b9050919050565b6000612e97612e92612e8d84612957565b612823565b61269e565b9050919050565b612ea781612e7c565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000612eea8385612ead565b9350612ef7838584612ebe565b612f0083612ecd565b840190509392505050565b6000606082019050612f2060008301876127d9565b612f2d6020830186612e9e565b8181036040830152612f40818486612ede565b905095945050505050565b7f4c6566742073686f756c6420626520696e7369646520746865206669656c6400600082015250565b6000612f81601f83612dff565b9150612f8c82612f4b565b602082019050919050565b60006020820190508181036000830152612fb081612f74565b9050919050565b7f52696768742073686f756c6420626520696e7369646520746865206669656c64600082015250565b6000612fed602083612dff565b9150612ff882612fb7565b602082019050919050565b6000602082019050818103600083015261301c81612fe0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b61307b8161263b565b82525050565b600061308d8383613072565b60208301905092915050565b6000602082019050919050565b6130af81613052565b6130b9818461305d565b92506130c482613068565b8060005b838110156130f55781516130dc8782613081565b96506130e783613099565b9250506001810190506130c8565b505050505050565b600060408201905061311260008301846130a6565b92915050565b60008151905061312781612645565b92915050565b6000602082840312156131435761314261255a565b5b600061315184828501613118565b91505092915050565b7f496e76616c696420666565000000000000000000000000000000000000000000600082015250565b6000613190600b83612dff565b915061319b8261315a565b602082019050919050565b600060208201905081810360008301526131bf81613183565b9050919050565b7f496e76616c69642065787420616d6f756e740000000000000000000000000000600082015250565b60006131fc601283612dff565b9150613207826131c6565b602082019050919050565b6000602082019050818103600083015261322b816131ef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061326c8261269e565b91506132778361269e565b925082820190508082111561328f5761328e613232565b5b92915050565b60006132a08261269e565b9150600082036132b3576132b2613232565b5b600182039050919050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b60006132f4601383612dff565b91506132ff826132be565b602082019050919050565b60006020820190508181036000830152613323816132e7565b9050919050565b600061333582612803565b9050919050565b6133458161332a565b82525050565b6000606082019050613360600083018661333c565b61336d602083018561333c565b61337a60408301846126a8565b949350505050565b60008160011c9050919050565b6000808291508390505b60018511156133d9578086048111156133b5576133b4613232565b5b60018516156133c45780820291505b80810290506133d285613382565b9450613399565b94509492505050565b6000826133f257600190506134ae565b8161340057600090506134ae565b816001811461341657600281146134205761344f565b60019150506134ae565b60ff84111561343257613431613232565b5b8360020a91508482111561344957613448613232565b5b506134ae565b5060208310610133831016604e8410600b84101617156134845782820a90508381111561347f5761347e613232565b5b6134ae565b613491848484600161338f565b925090508184048111156134a8576134a7613232565b5b81810290505b9392505050565b60006134c08261269e565b91506134cb8361269e565b92506134f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846133e2565b905092915050565b7f4d65726b6c6520747265652069732066756c6c00000000000000000000000000600082015250565b6000613536601383612dff565b915061354182613500565b602082019050919050565b6000602082019050818103600083015261356581613529565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006135a682612957565b91506135b183612957565b9250826135c1576135c061356c565b5b828206905092915050565b60006135d782612957565b91506135e283612957565b9250826135f2576135f161356c565b5b828204905092915050565b600061360882612957565b915063ffffffff820361361e5761361d613232565b5b600182019050919050565b600061363482612957565b915061363f83612957565b9250828201905063ffffffff81111561365b5761365a613232565b5b92915050565b7f496e76616c6964206d65726b6c6520726f6f7400000000000000000000000000600082015250565b6000613697601383612dff565b91506136a282613661565b602082019050919050565b600060208201905081810360008301526136c68161368a565b9050919050565b7f496e70757420697320616c7265616479207370656e7400000000000000000000600082015250565b6000613703601683612dff565b915061370e826136cd565b602082019050919050565b60006020820190508181036000830152613732816136f6565b9050919050565b7f4561726c79207265766f6b650000000000000000000000000000000000000000600082015250565b600061376f600c83612dff565b915061377a82613739565b602082019050919050565b6000602082019050818103600083015261379e81613762565b9050919050565b6137ae8161332a565b81146137b957600080fd5b50565b6000813590506137cb816137a5565b92915050565b60006137e060208401846137bc565b905092915050565b6137f18161332a565b82525050565b600061380660208401846128b4565b905092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261383a57613839613818565b5b83810192508235915060208301925067ffffffffffffffff8211156138625761386161380e565b5b60018202360383131561387857613877613813565b5b509250929050565b600082825260208201905092915050565b600061389d8385613880565b93506138aa838584612ebe565b6138b383612ecd565b840190509392505050565b600060a083016138d160008401846137d1565b6138de60008601826137e8565b506138ec60208401846137f7565b6138f96020860182612c09565b5061390760408401846137d1565b61391460408601826137e8565b5061392260608401846137f7565b61392f6060860182612c09565b5061393d608084018461381d565b8583036080870152613950838284613891565b925050508091505092915050565b6000602082019050818103600083015261397881846138be565b905092915050565b600061398b8261269e565b91506139968361269e565b9250826139a6576139a561356c565b5b828206905092915050565b7f496e636f72726563742065787465726e616c2064617461206861736800000000600082015250565b60006139e7601c83612dff565b91506139f2826139b1565b602082019050919050565b60006020820190508181036000830152613a16816139da565b9050919050565b7f496e76616c6964207075626c696320616d6f756e740000000000000000000000600082015250565b6000613a53601583612dff565b9150613a5e82613a1d565b602082019050919050565b60006020820190508181036000830152613a8281613a46565b9050919050565b600060208284031215613a9f57613a9e61255a565b5b6000613aad848285016137bc565b91505092915050565b7f43616e6e6f7420776974686472617720746f207a65726f206164647265737300600082015250565b6000613aec601f83612dff565b9150613af782613ab6565b602082019050919050565b60006020820190508181036000830152613b1b81613adf565b9050919050565b7f496e76616c6964207472616e73616374696f6e2070726f6f6600000000000000600082015250565b6000613b58601983612dff565b9150613b6382613b22565b602082019050919050565b60006020820190508181036000830152613b8781613b4b565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613bba57613bb9613b8e565b5b80840192508235915067ffffffffffffffff821115613bdc57613bdb613b93565b5b602083019250600182023603831315613bf857613bf7613b98565b5b509250929050565b7f4561726c79207769746864726177000000000000000000000000000000000000600082015250565b6000613c36600e83612dff565b9150613c4182613c00565b602082019050919050565b60006020820190508181036000830152613c6581613c29565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613cc8602a83612dff565b9150613cd382613c6c565b604082019050919050565b60006020820190508181036000830152613cf781613cbb565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613d34601f83612dff565b9150613d3f82613cfe565b602082019050919050565b60006020820190508181036000830152613d6381613d27565b9050919050565b6000604082019050613d7f600083018561333c565b613d8c60208301846126a8565b9392505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613def602683612dff565b9150613dfa82613d93565b604082019050919050565b60006020820190508181036000830152613e1e81613de2565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015613e59578082015181840152602081019050613e3e565b60008484015250505050565b6000613e7082613e25565b613e7a8185613e30565b9350613e8a818560208601613e3b565b80840191505092915050565b6000613ea28284613e65565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613ee3601d83612dff565b9150613eee82613ead565b602082019050919050565b60006020820190508181036000830152613f1281613ed6565b9050919050565b600081519050919050565b6000613f2f82613f19565b613f398185612dff565b9350613f49818560208601613e3b565b613f5281612ecd565b840191505092915050565b60006020820190508181036000830152613f778184613f24565b90509291505056fea264697066735822122022ec79d0bd8a8d8e3af31af6a63768a6f2da623fa89a2575b067ad10878d908464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d95760003560e01c806390eeb02b11610104578063e1faa146116100a2578063ed33639f11610071578063ed33639f14610598578063f178e47c146105b6578063fc0c546a146105e6578063fc7e9c6f14610604576101d9565b8063e1faa146146104fe578063e5285dcc1461051a578063e82955881461054a578063ec7329591461057a576101d9565b8063bc063e1a116100de578063bc063e1a14610474578063c2b40ae414610492578063cd87a3b4146104c2578063e013eb01146104e0576101d9565b806390eeb02b1461041c578063a452eac31461043a578063ba70f75714610456576101d9565b8063453827c61161017c57806376b53d991161014b57806376b53d99146103925780637fe24ffe146103c2578063864eb164146103e05780638ed83271146103fe576101d9565b8063453827c6146102f657806354442a90146103145780636d9833e3146103445780637236f47114610374576101d9565b80632d08050a116101b85780632d08050a1461026e578063386dc0831461028c57806338bf282e146102a8578063414a37ba146102d8576101d9565b806205c421146101de5780631514ff1d1461020e57806317cc915c1461023e575b600080fd5b6101f860048036038101906101f39190612589565b610622565b60405161020591906125d2565b60405180910390f35b6102286004803603810190610223919061260d565b610733565b60405161023591906125d2565b60405180910390f35b61025860048036038101906102539190612671565b61080f565b60405161026591906125d2565b60405180910390f35b61027661082f565b60405161028391906126b7565b60405180910390f35b6102a660048036038101906102a19190612737565b61083b565b005b6102c260048036038101906102bd9190612799565b61092f565b6040516102cf91906127e8565b60405180910390f35b6102e0610ae2565b6040516102ed91906126b7565b60405180910390f35b6102fe610b06565b60405161030b9190612882565b60405180910390f35b61032e600480360381019061032991906128c9565b610b2a565b60405161033b91906126b7565b60405180910390f35b61035e60048036038101906103599190612671565b610c04565b60405161036b91906125d2565b60405180910390f35b61037c610c9b565b6040516103899190612882565b60405180910390f35b6103ac60048036038101906103a79190612929565b610cbf565b6040516103b991906125d2565b60405180910390f35b6103ca610dd0565b6040516103d791906126b7565b60405180910390f35b6103e8610df4565b6040516103f59190612882565b60405180910390f35b610406610e18565b60405161041391906126b7565b60405180910390f35b610424610e1e565b6040516104319190612976565b60405180910390f35b610454600480360381019061044f91906129b0565b610e34565b005b61045e610e42565b60405161046b91906127e8565b60405180910390f35b61047c610e75565b60405161048991906126b7565b60405180910390f35b6104ac60048036038101906104a79190612a0e565b610e99565b6040516104b991906127e8565b60405180910390f35b6104ca610eb1565b6040516104d79190612976565b60405180910390f35b6104e8610eb6565b6040516104f591906126b7565b60405180910390f35b61051860048036038101906105139190612a3b565b610eda565b005b610534600480360381019061052f9190612671565b610ee8565b60405161054191906125d2565b60405180910390f35b610564600480360381019061055f9190612a0e565b610f12565b60405161057191906127e8565b60405180910390f35b6105826115e5565b60405161058f91906126b7565b60405180910390f35b6105a0611609565b6040516105ad9190612aba565b60405180910390f35b6105d060048036038101906105cb9190612a0e565b61162d565b6040516105dd91906127e8565b60405180910390f35b6105ee611645565b6040516105fb9190612af6565b60405180910390f35b61060c611669565b6040516106199190612976565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f398789b83600001600001846000016040018560000160c0016040518060c0016040528088610100013560001c8152602001886101800135815260200188610160013560001c815260200188610120013560001c8152602001886101a00135815260200188610140013560001c8152506040518563ffffffff1660e01b81526004016106eb9493929190612c94565b602060405180830381865afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190612d07565b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5c9d69e83600001600001846000016040018560000160c0016040518060400160405280886101200135815260200188610100013560001c8152506040518563ffffffff1660e01b81526004016107c79493929190612db8565b602060405180830381865afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190612d07565b9050919050565b60056020528060005260406000206000915054906101000a900460ff1681565b6706f05b59d3b2000081565b61084483610733565b610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a90612e5c565b60405180910390fd5b6108d533308561012001357f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661167f909392919063ffffffff16565b60006108e5846101000135611708565b90507ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd8461010001358285856040516109219493929190612f0b565b60405180910390a150505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c10610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098d90612f97565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260001c106109fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f290613003565b60405180910390fd5b610a03612538565b8381600060028110610a1857610a17613023565b5b6020020181815250508281600160028110610a3657610a35613023565b5b6020020181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663299e5660826040518263ffffffff1660e01b8152600401610a9891906130fd565b602060405180830381865afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad9919061312d565b91505092915050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01000000000000000000000000000000000000000000000000000000000000008210610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b85906131a6565b60405180910390fd5b7f01000000000000000000000000000000000000000000000000000000000000008310610bf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be790613212565b60405180910390fd5b8183610bfc9190613261565b905092915050565b60008060001b8203610c195760009050610c96565b6000600260009054906101000a900463ffffffff16905060008163ffffffff1690505b60016000828152602001908152602001600020548403610c6157600192505050610c96565b60008103610c7457606463ffffffff1690505b8080610c7f90613295565b9150508163ffffffff168103610c3c576000925050505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f398789b83600001600001846000016040018560000160c0016040518060c0016040528088610100013560001c8152602001886101800135815260200188610160013560001c815260200188610120013560001c8152602001886101a00135815260200188610140013560001c8152506040518563ffffffff1660e01b8152600401610d889493929190612c94565b602060405180830381865afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190612d07565b9050919050565b7f010000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045481565b600260009054906101000a900463ffffffff1681565b610e3e8282611919565b5050565b600060016000600260009054906101000a900463ffffffff1663ffffffff16815260200190815260200160002054905090565b7f010000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b606481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ee48282611d6f565b5050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b6000808203610f46577f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c60001b90506115e0565b60018203610f79577f13e37f2d6cb86c78ccc1788607c2b199788c6bb0a615a21f2e7a8e88384222f860001b90506115e0565b60028203610fac577f217126fa352c326896e8c2803eec8fd63ad50cf65edfef27a41a9e32dc62276560001b90506115e0565b60038203610fdf577f0e28a61a9b3e91007d5a9e3ada18e1b24d6d230c618388ee5df34cacd7397eee60001b90506115e0565b60048203611012577f27953447a6979839536badc5425ed15fadb0e292e9bc36f92f0aa5cfa501358760001b90506115e0565b60058203611045577f194191edbfb91d10f6a7afd315f33095410c7801c47175c2df6dc2cce0e3affc60001b90506115e0565b60068203611078577f1733dece17d71190516dbaf1927936fa643dc7079fc0cc731de9d6845a47741f60001b90506115e0565b600782036110ab577f267855a7dc75db39d81d17f95d0a7aa572bf5ae19f4db0e84221d2b2ef99921960001b90506115e0565b600882036110de577f1184e11836b4c36ad8238a340ecc0985eeba665327e33e9b0e3641027c27620d60001b90506115e0565b60098203611111577f0702ab83a135d7f55350ab1bfaa90babd8fc1d2b3e6a7215381a7b2213d6c5ce60001b90506115e0565b600a8203611144577f2eecc0de814cfd8c57ce882babb2e30d1da56621aef7a47f3291cffeaec26ad760001b90506115e0565b600b8203611177577f280bc02145c155d5833585b6c7b08501055157dd30ce005319621dc462d33b4760001b90506115e0565b600c82036111aa577f045132221d1fa0a7f4aed8acd2cbec1e2189b7732ccb2ec272b9c60f0d5afc5b60001b90506115e0565b600d82036111dd577f27f427ccbf58a44b1270abbe4eda6ba53bd6ac4d88cf1e00a13c4371ce71d36660001b90506115e0565b600e8203611210577f1617eaae5064f26e8f8a6493ae92bfded7fde71b65df1ca6d5dcec0df70b2cef60001b90506115e0565b600f8203611243577f20c6b400d0ea1b15435703c31c31ee63ad7ba5c8da66cec2796feacea575abca60001b90506115e0565b60108203611276577f09589ddb438723f53a8e57bdada7c5f8ed67e8fece3889a73618732965645eec60001b90506115e0565b601182036112a8577e64b6a738a5ff537db7b220f3394f0ecbd35bfd355c5425dc1166bf3236079b60001b90506115e0565b601282036112db577f095de56281b1d5055e897c3574ff790d5ee81dbc5df784ad2d67795e557c9e9f60001b90506115e0565b6013820361130e577f11cf2e2887aa21963a6ec14289183efe4d4c60f14ecd3d6fe0beebdf855a9b6360001b90506115e0565b60148203611341577f2b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb60001b90506115e0565b60158203611374577f16fdb637c2abf9c0f988dbf2fd64258c46fb6a273d537b2cf1603ea460b1327960001b90506115e0565b601682036113a7577f21bbd7e944f6124dad4c376df9cc12e7ca66e47dff703ff7cedb1a454edcf0ff60001b90506115e0565b601782036113da577f2784f8220b1c963e468f590f137baaa1625b3b92a27ad9b6e84eb0d3454d996260001b90506115e0565b6018820361140d577f16ace1a65b7534142f8cc1aad810b3d6a7a74ca905d9c275cb98ba57e509fc1060001b90506115e0565b60198203611440577f2328068c6a8c24265124debd8fe10d3f29f0665ea725a65e3638f6192a96a01360001b90506115e0565b601a8203611473577f2ddb991be1f028022411b4c4d2c22043e5e751c120736f00adf54acab1c9ac1460001b90506115e0565b601b82036114a6577f0113798410eaeb95056a464f70521eb58377c0155f2fe518a5594d38cc209cc060001b90506115e0565b601c82036114d9577f202d1ae61526f0d0d01ef80fb5d4055a7af45721024c2c24cffd6a3798f54d5060001b90506115e0565b601d820361150c577f23ab323453748129f2765f79615022f5bebd6f4096a796300aab049a60b0f18760001b90506115e0565b601e820361153f577f1f15585f8947e378bcf8bd918716799da909acdb944c57150b1eb4565fda8aa060001b90506115e0565b601f8203611572577f1eb064b21055ac6a350cf41eb30e4ce2cb19680217df3a243617c2838185ad0660001b90506115e0565b602082036115a5577f25a90efc49af54a5b7154a6eaba978dcf04796b4984fe54be8d4ea8579e1f1e660001b90506115e0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d79061330a565b60405180910390fd5b919050565b7f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260049054906101000a900463ffffffff1681565b611702846323b872dd60e01b8585856040516024016116a09392919061334b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121c5565b50505050565b600080600260049054906101000a900463ffffffff1690507f0000000000000000000000000000000000000000000000000000000000000000600261174d91906134b5565b8163ffffffff1603611794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178b9061354c565b60405180910390fd5b6000819050600084905060008060005b7f00000000000000000000000000000000000000000000000000000000000000008163ffffffff16101561186f5760006002866117e1919061359b565b63ffffffff1603611822578392506117fe8163ffffffff16610f12565b9150836000808363ffffffff16815260200190815260200160002081905550611841565b6000808263ffffffff1681526020019081526020016000205492508391505b61184b838361092f565b935060028561185a91906135cc565b94508080611867906135fd565b9150506117a4565b50600060646001600260009054906101000a900463ffffffff166118939190613629565b61189d919061359b565b905080600260006101000a81548163ffffffff021916908363ffffffff16021790555083600160008363ffffffff168152602001908152602001600020819055506001866118eb9190613629565b600260046101000a81548163ffffffff021916908363ffffffff160217905550859650505050505050919050565b61192161228c565b61192f826101000135610c04565b61196e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611965906136ad565b60405180910390fd5b61197c826101200135610ee8565b156119bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b390613719565b60405180910390fd5b42826101a001351015611a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fb90613785565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181604051602001611a36919061395e565b6040516020818303038152906040528051906020012060001c611a599190613980565b82610160013560001c14611aa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a99906139fd565b60405180910390fd5b611ab481602001358260600135610b2a565b82610180013514611afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af190613a69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816000016020810190611b259190613a89565b73ffffffffffffffffffffffffffffffffffffffff1603611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7290613b02565b60405180910390fd5b611b8482610622565b611bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bba90613b6e565b60405180910390fd5b600160056000846101200135815260200190815260200160002060006101000a81548160ff021916908315150217905550611c55816000016020810190611c0a9190613a89565b82602001357f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166122db9092919063ffffffff16565b600081606001351115611cc457611cc3816040016020810190611c789190613a89565b82606001357f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166122db9092919063ffffffff16565b5b6000611cd4836101400135611708565b90507ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd83610140013582848060800190611d0e9190613b9d565b604051611d1e9493929190612f0b565b60405180910390a17f5e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297ce836101200135604051611d5a91906127e8565b60405180910390a150611d6b612361565b5050565b611d7761228c565b611d85826101000135610c04565b611dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbb906136ad565b60405180910390fd5b611dd2826101200135610ee8565b15611e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0990613719565b60405180910390fd5b42826101a001351115611e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5190613c4c565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181604051602001611e8c919061395e565b6040516020818303038152906040528051906020012060001c611eaf9190613980565b82610160013560001c14611ef8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eef906139fd565b60405180910390fd5b611f0a81602001358260600135610b2a565b82610180013514611f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4790613a69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816000016020810190611f7b9190613a89565b73ffffffffffffffffffffffffffffffffffffffff1603611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc890613b02565b60405180910390fd5b611fda82610cbf565b612019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201090613b6e565b60405180910390fd5b600160056000846101200135815260200190815260200160002060006101000a81548160ff0219169083151502179055506120ab8160000160208101906120609190613a89565b82602001357f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166122db9092919063ffffffff16565b60008160600135111561211a576121198160400160208101906120ce9190613a89565b82606001357f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166122db9092919063ffffffff16565b5b600061212a836101400135611708565b90507ff3843eddcfcac65d12d9f26261dab50671fdbf5dc44441816c8bbdace2411afd836101400135828480608001906121649190613b9d565b6040516121749493929190612f0b565b60405180910390a17f5e58f77bbf94b46d8d896e29753e4458c6e59b48581e20ed58c9558e96f297ce8361012001356040516121b091906127e8565b60405180910390a1506121c1612361565b5050565b6000612227826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661236b9092919063ffffffff16565b905060008151111561228757808060200190518101906122479190612d07565b612286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227d90613cde565b60405180910390fd5b5b505050565b6002600354036122d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c890613d4a565b60405180910390fd5b6002600381905550565b61235c8363a9059cbb60e01b84846040516024016122fa929190613d6a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121c5565b505050565b6001600381905550565b606061237a8484600085612383565b90509392505050565b6060824710156123c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bf90613e05565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516123f19190613e96565b60006040518083038185875af1925050503d806000811461242e576040519150601f19603f3d011682016040523d82523d6000602084013e612433565b606091505b509150915061244487838387612450565b92505050949350505050565b606083156124b25760008351036124aa5761246a856124c5565b6124a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a090613ef9565b60405180910390fd5b5b8290506124bd565b6124bc83836124e8565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156124fb5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252f9190613f5d565b60405180910390fd5b6040518060400160405280600290602082028036833780820191505090505090565b600080fd5b600080fd5b600080fd5b60006101c082840312156125805761257f612564565b5b81905092915050565b60006101c082840312156125a05761259f61255a565b5b60006125ae84828501612569565b91505092915050565b60008115159050919050565b6125cc816125b7565b82525050565b60006020820190506125e760008301846125c3565b92915050565b6000610140828403121561260457612603612564565b5b81905092915050565b600061014082840312156126245761262361255a565b5b6000612632848285016125ed565b91505092915050565b6000819050919050565b61264e8161263b565b811461265957600080fd5b50565b60008135905061266b81612645565b92915050565b6000602082840312156126875761268661255a565b5b60006126958482850161265c565b91505092915050565b6000819050919050565b6126b18161269e565b82525050565b60006020820190506126cc60008301846126a8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126126f7576126f66126d2565b5b8235905067ffffffffffffffff811115612714576127136126d7565b5b6020830191508360018202830111156127305761272f6126dc565b5b9250929050565b600080600061016084860312156127515761275061255a565b5b600061275f868287016125ed565b93505061014084013567ffffffffffffffff8111156127815761278061255f565b5b61278d868287016126e1565b92509250509250925092565b600080604083850312156127b0576127af61255a565b5b60006127be8582860161265c565b92505060206127cf8582860161265c565b9150509250929050565b6127e28161263b565b82525050565b60006020820190506127fd60008301846127d9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061284861284361283e84612803565b612823565b612803565b9050919050565b600061285a8261282d565b9050919050565b600061286c8261284f565b9050919050565b61287c81612861565b82525050565b60006020820190506128976000830184612873565b92915050565b6128a68161269e565b81146128b157600080fd5b50565b6000813590506128c38161289d565b92915050565b600080604083850312156128e0576128df61255a565b5b60006128ee858286016128b4565b92505060206128ff858286016128b4565b9150509250929050565b60006101c082840312156129205761291f612564565b5b81905092915050565b60006101c082840312156129405761293f61255a565b5b600061294e84828501612909565b91505092915050565b600063ffffffff82169050919050565b61297081612957565b82525050565b600060208201905061298b6000830184612967565b92915050565b600060a082840312156129a7576129a6612564565b5b81905092915050565b6000806101e083850312156129c8576129c761255a565b5b60006129d685828601612569565b9250506101c083013567ffffffffffffffff8111156129f8576129f761255f565b5b612a0485828601612991565b9150509250929050565b600060208284031215612a2457612a2361255a565b5b6000612a32848285016128b4565b91505092915050565b6000806101e08385031215612a5357612a5261255a565b5b6000612a6185828601612909565b9250506101c083013567ffffffffffffffff811115612a8357612a8261255f565b5b612a8f85828601612991565b9150509250929050565b6000612aa48261284f565b9050919050565b612ab481612a99565b82525050565b6000602082019050612acf6000830184612aab565b92915050565b6000612ae08261284f565b9050919050565b612af081612ad5565b82525050565b6000602082019050612b0b6000830184612ae7565b92915050565b82818337505050565b612b2660408383612b11565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b612b5660408383612b11565b5050565b6000612b668383612b4a565b60408301905092915050565b600082905092915050565b6000604082019050919050565b612b9381612b2a565b612b9d8184612b35565b9250612ba882612b40565b8060005b83811015612be157612bbe8284612b72565b612bc88782612b5a565b9650612bd383612b7d565b925050600181019050612bac565b505050505050565b600060069050919050565b600081905092915050565b6000819050919050565b612c128161269e565b82525050565b6000612c248383612c09565b60208301905092915050565b6000602082019050919050565b612c4681612be9565b612c508184612bf4565b9250612c5b82612bff565b8060005b83811015612c8c578151612c738782612c18565b9650612c7e83612c30565b925050600181019050612c5f565b505050505050565b60006101c082019050612caa6000830187612b1a565b612cb76040830186612b8a565b612cc460c0830185612b1a565b612cd2610100830184612c3d565b95945050505050565b612ce4816125b7565b8114612cef57600080fd5b50565b600081519050612d0181612cdb565b92915050565b600060208284031215612d1d57612d1c61255a565b5b6000612d2b84828501612cf2565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b612d6a81612d34565b612d748184612d3f565b9250612d7f82612d4a565b8060005b83811015612db0578151612d978782612c18565b9650612da283612d54565b925050600181019050612d83565b505050505050565b600061014082019050612dce6000830187612b1a565b612ddb6040830186612b8a565b612de860c0830185612b1a565b612df6610100830184612d61565b95945050505050565b600082825260208201905092915050565b7f496e76616c6964206372656174652070726f6f66000000000000000000000000600082015250565b6000612e46601483612dff565b9150612e5182612e10565b602082019050919050565b60006020820190508181036000830152612e7581612e39565b9050919050565b6000612e97612e92612e8d84612957565b612823565b61269e565b9050919050565b612ea781612e7c565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000612eea8385612ead565b9350612ef7838584612ebe565b612f0083612ecd565b840190509392505050565b6000606082019050612f2060008301876127d9565b612f2d6020830186612e9e565b8181036040830152612f40818486612ede565b905095945050505050565b7f4c6566742073686f756c6420626520696e7369646520746865206669656c6400600082015250565b6000612f81601f83612dff565b9150612f8c82612f4b565b602082019050919050565b60006020820190508181036000830152612fb081612f74565b9050919050565b7f52696768742073686f756c6420626520696e7369646520746865206669656c64600082015250565b6000612fed602083612dff565b9150612ff882612fb7565b602082019050919050565b6000602082019050818103600083015261301c81612fe0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b61307b8161263b565b82525050565b600061308d8383613072565b60208301905092915050565b6000602082019050919050565b6130af81613052565b6130b9818461305d565b92506130c482613068565b8060005b838110156130f55781516130dc8782613081565b96506130e783613099565b9250506001810190506130c8565b505050505050565b600060408201905061311260008301846130a6565b92915050565b60008151905061312781612645565b92915050565b6000602082840312156131435761314261255a565b5b600061315184828501613118565b91505092915050565b7f496e76616c696420666565000000000000000000000000000000000000000000600082015250565b6000613190600b83612dff565b915061319b8261315a565b602082019050919050565b600060208201905081810360008301526131bf81613183565b9050919050565b7f496e76616c69642065787420616d6f756e740000000000000000000000000000600082015250565b60006131fc601283612dff565b9150613207826131c6565b602082019050919050565b6000602082019050818103600083015261322b816131ef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061326c8261269e565b91506132778361269e565b925082820190508082111561328f5761328e613232565b5b92915050565b60006132a08261269e565b9150600082036132b3576132b2613232565b5b600182039050919050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b60006132f4601383612dff565b91506132ff826132be565b602082019050919050565b60006020820190508181036000830152613323816132e7565b9050919050565b600061333582612803565b9050919050565b6133458161332a565b82525050565b6000606082019050613360600083018661333c565b61336d602083018561333c565b61337a60408301846126a8565b949350505050565b60008160011c9050919050565b6000808291508390505b60018511156133d9578086048111156133b5576133b4613232565b5b60018516156133c45780820291505b80810290506133d285613382565b9450613399565b94509492505050565b6000826133f257600190506134ae565b8161340057600090506134ae565b816001811461341657600281146134205761344f565b60019150506134ae565b60ff84111561343257613431613232565b5b8360020a91508482111561344957613448613232565b5b506134ae565b5060208310610133831016604e8410600b84101617156134845782820a90508381111561347f5761347e613232565b5b6134ae565b613491848484600161338f565b925090508184048111156134a8576134a7613232565b5b81810290505b9392505050565b60006134c08261269e565b91506134cb8361269e565b92506134f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846133e2565b905092915050565b7f4d65726b6c6520747265652069732066756c6c00000000000000000000000000600082015250565b6000613536601383612dff565b915061354182613500565b602082019050919050565b6000602082019050818103600083015261356581613529565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006135a682612957565b91506135b183612957565b9250826135c1576135c061356c565b5b828206905092915050565b60006135d782612957565b91506135e283612957565b9250826135f2576135f161356c565b5b828204905092915050565b600061360882612957565b915063ffffffff820361361e5761361d613232565b5b600182019050919050565b600061363482612957565b915061363f83612957565b9250828201905063ffffffff81111561365b5761365a613232565b5b92915050565b7f496e76616c6964206d65726b6c6520726f6f7400000000000000000000000000600082015250565b6000613697601383612dff565b91506136a282613661565b602082019050919050565b600060208201905081810360008301526136c68161368a565b9050919050565b7f496e70757420697320616c7265616479207370656e7400000000000000000000600082015250565b6000613703601683612dff565b915061370e826136cd565b602082019050919050565b60006020820190508181036000830152613732816136f6565b9050919050565b7f4561726c79207265766f6b650000000000000000000000000000000000000000600082015250565b600061376f600c83612dff565b915061377a82613739565b602082019050919050565b6000602082019050818103600083015261379e81613762565b9050919050565b6137ae8161332a565b81146137b957600080fd5b50565b6000813590506137cb816137a5565b92915050565b60006137e060208401846137bc565b905092915050565b6137f18161332a565b82525050565b600061380660208401846128b4565b905092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261383a57613839613818565b5b83810192508235915060208301925067ffffffffffffffff8211156138625761386161380e565b5b60018202360383131561387857613877613813565b5b509250929050565b600082825260208201905092915050565b600061389d8385613880565b93506138aa838584612ebe565b6138b383612ecd565b840190509392505050565b600060a083016138d160008401846137d1565b6138de60008601826137e8565b506138ec60208401846137f7565b6138f96020860182612c09565b5061390760408401846137d1565b61391460408601826137e8565b5061392260608401846137f7565b61392f6060860182612c09565b5061393d608084018461381d565b8583036080870152613950838284613891565b925050508091505092915050565b6000602082019050818103600083015261397881846138be565b905092915050565b600061398b8261269e565b91506139968361269e565b9250826139a6576139a561356c565b5b828206905092915050565b7f496e636f72726563742065787465726e616c2064617461206861736800000000600082015250565b60006139e7601c83612dff565b91506139f2826139b1565b602082019050919050565b60006020820190508181036000830152613a16816139da565b9050919050565b7f496e76616c6964207075626c696320616d6f756e740000000000000000000000600082015250565b6000613a53601583612dff565b9150613a5e82613a1d565b602082019050919050565b60006020820190508181036000830152613a8281613a46565b9050919050565b600060208284031215613a9f57613a9e61255a565b5b6000613aad848285016137bc565b91505092915050565b7f43616e6e6f7420776974686472617720746f207a65726f206164647265737300600082015250565b6000613aec601f83612dff565b9150613af782613ab6565b602082019050919050565b60006020820190508181036000830152613b1b81613adf565b9050919050565b7f496e76616c6964207472616e73616374696f6e2070726f6f6600000000000000600082015250565b6000613b58601983612dff565b9150613b6382613b22565b602082019050919050565b60006020820190508181036000830152613b8781613b4b565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613bba57613bb9613b8e565b5b80840192508235915067ffffffffffffffff821115613bdc57613bdb613b93565b5b602083019250600182023603831315613bf857613bf7613b98565b5b509250929050565b7f4561726c79207769746864726177000000000000000000000000000000000000600082015250565b6000613c36600e83612dff565b9150613c4182613c00565b602082019050919050565b60006020820190508181036000830152613c6581613c29565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613cc8602a83612dff565b9150613cd382613c6c565b604082019050919050565b60006020820190508181036000830152613cf781613cbb565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613d34601f83612dff565b9150613d3f82613cfe565b602082019050919050565b60006020820190508181036000830152613d6381613d27565b9050919050565b6000604082019050613d7f600083018561333c565b613d8c60208301846126a8565b9392505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613def602683612dff565b9150613dfa82613d93565b604082019050919050565b60006020820190508181036000830152613e1e81613de2565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015613e59578082015181840152602081019050613e3e565b60008484015250505050565b6000613e7082613e25565b613e7a8185613e30565b9350613e8a818560208601613e3b565b80840191505092915050565b6000613ea28284613e65565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613ee3601d83612dff565b9150613eee82613ead565b602082019050919050565b60006020820190508181036000830152613f1281613ed6565b9050919050565b600081519050919050565b6000613f2f82613f19565b613f398185612dff565b9350613f49818560208601613e3b565b613f5281612ecd565b840191505092915050565b60006020820190508181036000830152613f778184613f24565b90509291505056fea264697066735822122022ec79d0bd8a8d8e3af31af6a63768a6f2da623fa89a2575b067ad10878d908464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "zeros(uint256)": {
        "details": "Zero elements for poseidon hash based merkle tree"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 799,
        "contract": "contracts/Tsunami.sol:Tsunami",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 803,
        "contract": "contracts/Tsunami.sol:Tsunami",
        "label": "roots",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 805,
        "contract": "contracts/Tsunami.sol:Tsunami",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 807,
        "contract": "contracts/Tsunami.sol:Tsunami",
        "label": "nextIndex",
        "offset": 4,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 10,
        "contract": "contracts/Tsunami.sol:Tsunami",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1361,
        "contract": "contracts/Tsunami.sol:Tsunami",
        "label": "maxDepositAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1365,
        "contract": "contracts/Tsunami.sol:Tsunami",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}